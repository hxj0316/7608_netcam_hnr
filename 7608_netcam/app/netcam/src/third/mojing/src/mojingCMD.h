// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mojingCMD.proto

#ifndef PROTOBUF_mojingCMD_2eproto__INCLUDED
#define PROTOBUF_mojingCMD_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace goprotobuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mojingCMD_2eproto();
void protobuf_AssignDesc_mojingCMD_2eproto();
void protobuf_ShutdownFile_mojingCMD_2eproto();

class DeviceUpdateNotify;
class DeviceUpdateRequest;
class DeviceUpdateResponse;
class Ping;
class Pong;
class RegisterRequest;
class RegisterRequestWithAuth;
class RegisterResponse;
class RegisterResponseWithNonce;
class UploadDeviceInfoRequest;
class UploadDeviceInfoResponse;

// ===================================================================

class RegisterRequest : public ::google::protobuf::MessageLite {
 public:
  RegisterRequest();
  virtual ~RegisterRequest();

  RegisterRequest(const RegisterRequest& from);

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const RegisterRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RegisterRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RegisterRequest* other);

  // implements Message ----------------------------------------------

  inline RegisterRequest* New() const { return New(NULL); }

  RegisterRequest* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegisterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string DeviceID = 1;
  void clear_deviceid();
  static const int kDeviceIDFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // optional int64 RegisterTime = 2;
  void clear_registertime();
  static const int kRegisterTimeFieldNumber = 2;
  ::google::protobuf::int64 registertime() const;
  void set_registertime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:goprotobuf.RegisterRequest)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::int64 registertime_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mojingCMD_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mojingCMD_2eproto();
  #endif
  friend void protobuf_AssignDesc_mojingCMD_2eproto();
  friend void protobuf_ShutdownFile_mojingCMD_2eproto();

  void InitAsDefaultInstance();
  static RegisterRequest* default_instance_;
};
// -------------------------------------------------------------------

class RegisterResponseWithNonce : public ::google::protobuf::MessageLite {
 public:
  RegisterResponseWithNonce();
  virtual ~RegisterResponseWithNonce();

  RegisterResponseWithNonce(const RegisterResponseWithNonce& from);

  inline RegisterResponseWithNonce& operator=(const RegisterResponseWithNonce& from) {
    CopyFrom(from);
    return *this;
  }

  static const RegisterResponseWithNonce& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RegisterResponseWithNonce* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RegisterResponseWithNonce* other);

  // implements Message ----------------------------------------------

  inline RegisterResponseWithNonce* New() const { return New(NULL); }

  RegisterResponseWithNonce* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RegisterResponseWithNonce& from);
  void MergeFrom(const RegisterResponseWithNonce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegisterResponseWithNonce* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // optional string Message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional string nonce = 3;
  void clear_nonce();
  static const int kNonceFieldNumber = 3;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // @@protoc_insertion_point(class_scope:goprotobuf.RegisterResponseWithNonce)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mojingCMD_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mojingCMD_2eproto();
  #endif
  friend void protobuf_AssignDesc_mojingCMD_2eproto();
  friend void protobuf_ShutdownFile_mojingCMD_2eproto();

  void InitAsDefaultInstance();
  static RegisterResponseWithNonce* default_instance_;
};
// -------------------------------------------------------------------

class RegisterRequestWithAuth : public ::google::protobuf::MessageLite {
 public:
  RegisterRequestWithAuth();
  virtual ~RegisterRequestWithAuth();

  RegisterRequestWithAuth(const RegisterRequestWithAuth& from);

  inline RegisterRequestWithAuth& operator=(const RegisterRequestWithAuth& from) {
    CopyFrom(from);
    return *this;
  }

  static const RegisterRequestWithAuth& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RegisterRequestWithAuth* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RegisterRequestWithAuth* other);

  // implements Message ----------------------------------------------

  inline RegisterRequestWithAuth* New() const { return New(NULL); }

  RegisterRequestWithAuth* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RegisterRequestWithAuth& from);
  void MergeFrom(const RegisterRequestWithAuth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegisterRequestWithAuth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string DeviceID = 1;
  void clear_deviceid();
  static const int kDeviceIDFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // optional int64 RegisterTime = 2;
  void clear_registertime();
  static const int kRegisterTimeFieldNumber = 2;
  ::google::protobuf::int64 registertime() const;
  void set_registertime(::google::protobuf::int64 value);

  // optional string Auth = 3;
  void clear_auth();
  static const int kAuthFieldNumber = 3;
  const ::std::string& auth() const;
  void set_auth(const ::std::string& value);
  void set_auth(const char* value);
  void set_auth(const char* value, size_t size);
  ::std::string* mutable_auth();
  ::std::string* release_auth();
  void set_allocated_auth(::std::string* auth);

  // optional int32 PingSpan = 4;
  void clear_pingspan();
  static const int kPingSpanFieldNumber = 4;
  ::google::protobuf::int32 pingspan() const;
  void set_pingspan(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:goprotobuf.RegisterRequestWithAuth)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::int64 registertime_;
  ::google::protobuf::internal::ArenaStringPtr auth_;
  ::google::protobuf::int32 pingspan_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mojingCMD_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mojingCMD_2eproto();
  #endif
  friend void protobuf_AssignDesc_mojingCMD_2eproto();
  friend void protobuf_ShutdownFile_mojingCMD_2eproto();

  void InitAsDefaultInstance();
  static RegisterRequestWithAuth* default_instance_;
};
// -------------------------------------------------------------------

class RegisterResponse : public ::google::protobuf::MessageLite {
 public:
  RegisterResponse();
  virtual ~RegisterResponse();

  RegisterResponse(const RegisterResponse& from);

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const RegisterResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RegisterResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RegisterResponse* other);

  // implements Message ----------------------------------------------

  inline RegisterResponse* New() const { return New(NULL); }

  RegisterResponse* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RegisterResponse& from);
  void MergeFrom(const RegisterResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegisterResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // optional string Message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:goprotobuf.RegisterResponse)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mojingCMD_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mojingCMD_2eproto();
  #endif
  friend void protobuf_AssignDesc_mojingCMD_2eproto();
  friend void protobuf_ShutdownFile_mojingCMD_2eproto();

  void InitAsDefaultInstance();
  static RegisterResponse* default_instance_;
};
// -------------------------------------------------------------------

class UploadDeviceInfoRequest : public ::google::protobuf::MessageLite {
 public:
  UploadDeviceInfoRequest();
  virtual ~UploadDeviceInfoRequest();

  UploadDeviceInfoRequest(const UploadDeviceInfoRequest& from);

  inline UploadDeviceInfoRequest& operator=(const UploadDeviceInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const UploadDeviceInfoRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UploadDeviceInfoRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UploadDeviceInfoRequest* other);

  // implements Message ----------------------------------------------

  inline UploadDeviceInfoRequest* New() const { return New(NULL); }

  UploadDeviceInfoRequest* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UploadDeviceInfoRequest& from);
  void MergeFrom(const UploadDeviceInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UploadDeviceInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string DeviceID = 1;
  void clear_deviceid();
  static const int kDeviceIDFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // optional string FirmwareVersion = 2;
  void clear_firmwareversion();
  static const int kFirmwareVersionFieldNumber = 2;
  const ::std::string& firmwareversion() const;
  void set_firmwareversion(const ::std::string& value);
  void set_firmwareversion(const char* value);
  void set_firmwareversion(const char* value, size_t size);
  ::std::string* mutable_firmwareversion();
  ::std::string* release_firmwareversion();
  void set_allocated_firmwareversion(::std::string* firmwareversion);

  // optional string FirmwareMD5 = 3;
  void clear_firmwaremd5();
  static const int kFirmwareMD5FieldNumber = 3;
  const ::std::string& firmwaremd5() const;
  void set_firmwaremd5(const ::std::string& value);
  void set_firmwaremd5(const char* value);
  void set_firmwaremd5(const char* value, size_t size);
  ::std::string* mutable_firmwaremd5();
  ::std::string* release_firmwaremd5();
  void set_allocated_firmwaremd5(::std::string* firmwaremd5);

  // optional string SoftwareVersion = 4;
  void clear_softwareversion();
  static const int kSoftwareVersionFieldNumber = 4;
  const ::std::string& softwareversion() const;
  void set_softwareversion(const ::std::string& value);
  void set_softwareversion(const char* value);
  void set_softwareversion(const char* value, size_t size);
  ::std::string* mutable_softwareversion();
  ::std::string* release_softwareversion();
  void set_allocated_softwareversion(::std::string* softwareversion);

  // optional string SoftwareMD5 = 5;
  void clear_softwaremd5();
  static const int kSoftwareMD5FieldNumber = 5;
  const ::std::string& softwaremd5() const;
  void set_softwaremd5(const ::std::string& value);
  void set_softwaremd5(const char* value);
  void set_softwaremd5(const char* value, size_t size);
  ::std::string* mutable_softwaremd5();
  ::std::string* release_softwaremd5();
  void set_allocated_softwaremd5(::std::string* softwaremd5);

  // @@protoc_insertion_point(class_scope:goprotobuf.UploadDeviceInfoRequest)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::internal::ArenaStringPtr firmwareversion_;
  ::google::protobuf::internal::ArenaStringPtr firmwaremd5_;
  ::google::protobuf::internal::ArenaStringPtr softwareversion_;
  ::google::protobuf::internal::ArenaStringPtr softwaremd5_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mojingCMD_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mojingCMD_2eproto();
  #endif
  friend void protobuf_AssignDesc_mojingCMD_2eproto();
  friend void protobuf_ShutdownFile_mojingCMD_2eproto();

  void InitAsDefaultInstance();
  static UploadDeviceInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class UploadDeviceInfoResponse : public ::google::protobuf::MessageLite {
 public:
  UploadDeviceInfoResponse();
  virtual ~UploadDeviceInfoResponse();

  UploadDeviceInfoResponse(const UploadDeviceInfoResponse& from);

  inline UploadDeviceInfoResponse& operator=(const UploadDeviceInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const UploadDeviceInfoResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UploadDeviceInfoResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UploadDeviceInfoResponse* other);

  // implements Message ----------------------------------------------

  inline UploadDeviceInfoResponse* New() const { return New(NULL); }

  UploadDeviceInfoResponse* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UploadDeviceInfoResponse& from);
  void MergeFrom(const UploadDeviceInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UploadDeviceInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // optional string Message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:goprotobuf.UploadDeviceInfoResponse)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mojingCMD_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mojingCMD_2eproto();
  #endif
  friend void protobuf_AssignDesc_mojingCMD_2eproto();
  friend void protobuf_ShutdownFile_mojingCMD_2eproto();

  void InitAsDefaultInstance();
  static UploadDeviceInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class Ping : public ::google::protobuf::MessageLite {
 public:
  Ping();
  virtual ~Ping();

  Ping(const Ping& from);

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }

  static const Ping& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Ping* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Ping* other);

  // implements Message ----------------------------------------------

  inline Ping* New() const { return New(NULL); }

  Ping* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:goprotobuf.Ping)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::int64 time_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mojingCMD_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mojingCMD_2eproto();
  #endif
  friend void protobuf_AssignDesc_mojingCMD_2eproto();
  friend void protobuf_ShutdownFile_mojingCMD_2eproto();

  void InitAsDefaultInstance();
  static Ping* default_instance_;
};
// -------------------------------------------------------------------

class Pong : public ::google::protobuf::MessageLite {
 public:
  Pong();
  virtual ~Pong();

  Pong(const Pong& from);

  inline Pong& operator=(const Pong& from) {
    CopyFrom(from);
    return *this;
  }

  static const Pong& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Pong* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Pong* other);

  // implements Message ----------------------------------------------

  inline Pong* New() const { return New(NULL); }

  Pong* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Pong& from);
  void MergeFrom(const Pong& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pong* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // optional string Message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:goprotobuf.Pong)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mojingCMD_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mojingCMD_2eproto();
  #endif
  friend void protobuf_AssignDesc_mojingCMD_2eproto();
  friend void protobuf_ShutdownFile_mojingCMD_2eproto();

  void InitAsDefaultInstance();
  static Pong* default_instance_;
};
// -------------------------------------------------------------------

class DeviceUpdateRequest : public ::google::protobuf::MessageLite {
 public:
  DeviceUpdateRequest();
  virtual ~DeviceUpdateRequest();

  DeviceUpdateRequest(const DeviceUpdateRequest& from);

  inline DeviceUpdateRequest& operator=(const DeviceUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const DeviceUpdateRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DeviceUpdateRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DeviceUpdateRequest* other);

  // implements Message ----------------------------------------------

  inline DeviceUpdateRequest* New() const { return New(NULL); }

  DeviceUpdateRequest* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DeviceUpdateRequest& from);
  void MergeFrom(const DeviceUpdateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 UpdateType = 1;
  void clear_updatetype();
  static const int kUpdateTypeFieldNumber = 1;
  ::google::protobuf::int32 updatetype() const;
  void set_updatetype(::google::protobuf::int32 value);

  // optional string wareURL = 2;
  void clear_wareurl();
  static const int kWareURLFieldNumber = 2;
  const ::std::string& wareurl() const;
  void set_wareurl(const ::std::string& value);
  void set_wareurl(const char* value);
  void set_wareurl(const char* value, size_t size);
  ::std::string* mutable_wareurl();
  ::std::string* release_wareurl();
  void set_allocated_wareurl(::std::string* wareurl);

  // optional string wareVersion = 3;
  void clear_wareversion();
  static const int kWareVersionFieldNumber = 3;
  const ::std::string& wareversion() const;
  void set_wareversion(const ::std::string& value);
  void set_wareversion(const char* value);
  void set_wareversion(const char* value, size_t size);
  ::std::string* mutable_wareversion();
  ::std::string* release_wareversion();
  void set_allocated_wareversion(::std::string* wareversion);

  // optional string wareMD5 = 4;
  void clear_waremd5();
  static const int kWareMD5FieldNumber = 4;
  const ::std::string& waremd5() const;
  void set_waremd5(const ::std::string& value);
  void set_waremd5(const char* value);
  void set_waremd5(const char* value, size_t size);
  ::std::string* mutable_waremd5();
  ::std::string* release_waremd5();
  void set_allocated_waremd5(::std::string* waremd5);

  // optional string TaskID = 5;
  void clear_taskid();
  static const int kTaskIDFieldNumber = 5;
  const ::std::string& taskid() const;
  void set_taskid(const ::std::string& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  ::std::string* mutable_taskid();
  ::std::string* release_taskid();
  void set_allocated_taskid(::std::string* taskid);

  // @@protoc_insertion_point(class_scope:goprotobuf.DeviceUpdateRequest)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr wareurl_;
  ::google::protobuf::internal::ArenaStringPtr wareversion_;
  ::google::protobuf::internal::ArenaStringPtr waremd5_;
  ::google::protobuf::internal::ArenaStringPtr taskid_;
  ::google::protobuf::int32 updatetype_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mojingCMD_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mojingCMD_2eproto();
  #endif
  friend void protobuf_AssignDesc_mojingCMD_2eproto();
  friend void protobuf_ShutdownFile_mojingCMD_2eproto();

  void InitAsDefaultInstance();
  static DeviceUpdateRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeviceUpdateResponse : public ::google::protobuf::MessageLite {
 public:
  DeviceUpdateResponse();
  virtual ~DeviceUpdateResponse();

  DeviceUpdateResponse(const DeviceUpdateResponse& from);

  inline DeviceUpdateResponse& operator=(const DeviceUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const DeviceUpdateResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DeviceUpdateResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DeviceUpdateResponse* other);

  // implements Message ----------------------------------------------

  inline DeviceUpdateResponse* New() const { return New(NULL); }

  DeviceUpdateResponse* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DeviceUpdateResponse& from);
  void MergeFrom(const DeviceUpdateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // optional string Message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:goprotobuf.DeviceUpdateResponse)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 code_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mojingCMD_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mojingCMD_2eproto();
  #endif
  friend void protobuf_AssignDesc_mojingCMD_2eproto();
  friend void protobuf_ShutdownFile_mojingCMD_2eproto();

  void InitAsDefaultInstance();
  static DeviceUpdateResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeviceUpdateNotify : public ::google::protobuf::MessageLite {
 public:
  DeviceUpdateNotify();
  virtual ~DeviceUpdateNotify();

  DeviceUpdateNotify(const DeviceUpdateNotify& from);

  inline DeviceUpdateNotify& operator=(const DeviceUpdateNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const DeviceUpdateNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DeviceUpdateNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DeviceUpdateNotify* other);

  // implements Message ----------------------------------------------

  inline DeviceUpdateNotify* New() const { return New(NULL); }

  DeviceUpdateNotify* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DeviceUpdateNotify& from);
  void MergeFrom(const DeviceUpdateNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceUpdateNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 UpdateType = 1;
  void clear_updatetype();
  static const int kUpdateTypeFieldNumber = 1;
  ::google::protobuf::int32 updatetype() const;
  void set_updatetype(::google::protobuf::int32 value);

  // optional string TastID = 2;
  void clear_tastid();
  static const int kTastIDFieldNumber = 2;
  const ::std::string& tastid() const;
  void set_tastid(const ::std::string& value);
  void set_tastid(const char* value);
  void set_tastid(const char* value, size_t size);
  ::std::string* mutable_tastid();
  ::std::string* release_tastid();
  void set_allocated_tastid(::std::string* tastid);

  // optional string wareVersion = 3;
  void clear_wareversion();
  static const int kWareVersionFieldNumber = 3;
  const ::std::string& wareversion() const;
  void set_wareversion(const ::std::string& value);
  void set_wareversion(const char* value);
  void set_wareversion(const char* value, size_t size);
  ::std::string* mutable_wareversion();
  ::std::string* release_wareversion();
  void set_allocated_wareversion(::std::string* wareversion);

  // optional string wareMD5 = 4;
  void clear_waremd5();
  static const int kWareMD5FieldNumber = 4;
  const ::std::string& waremd5() const;
  void set_waremd5(const ::std::string& value);
  void set_waremd5(const char* value);
  void set_waremd5(const char* value, size_t size);
  ::std::string* mutable_waremd5();
  ::std::string* release_waremd5();
  void set_allocated_waremd5(::std::string* waremd5);

  // optional int64 UpdateTime = 5;
  void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 5;
  ::google::protobuf::int64 updatetime() const;
  void set_updatetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:goprotobuf.DeviceUpdateNotify)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr tastid_;
  ::google::protobuf::internal::ArenaStringPtr wareversion_;
  ::google::protobuf::internal::ArenaStringPtr waremd5_;
  ::google::protobuf::int64 updatetime_;
  ::google::protobuf::int32 updatetype_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_mojingCMD_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_mojingCMD_2eproto();
  #endif
  friend void protobuf_AssignDesc_mojingCMD_2eproto();
  friend void protobuf_ShutdownFile_mojingCMD_2eproto();

  void InitAsDefaultInstance();
  static DeviceUpdateNotify* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterRequest

// optional string DeviceID = 1;
inline void RegisterRequest::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterRequest.DeviceID)
  return deviceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterRequest.DeviceID)
}
inline void RegisterRequest::set_deviceid(const char* value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.RegisterRequest.DeviceID)
}
inline void RegisterRequest::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.RegisterRequest.DeviceID)
}
inline ::std::string* RegisterRequest::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.RegisterRequest.DeviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:goprotobuf.RegisterRequest.DeviceID)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequest::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.RegisterRequest.DeviceID)
}

// optional int64 RegisterTime = 2;
inline void RegisterRequest::clear_registertime() {
  registertime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RegisterRequest::registertime() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterRequest.RegisterTime)
  return registertime_;
}
inline void RegisterRequest::set_registertime(::google::protobuf::int64 value) {
  
  registertime_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterRequest.RegisterTime)
}

// -------------------------------------------------------------------

// RegisterResponseWithNonce

// optional int32 Code = 1;
inline void RegisterResponseWithNonce::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 RegisterResponseWithNonce::code() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterResponseWithNonce.Code)
  return code_;
}
inline void RegisterResponseWithNonce::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterResponseWithNonce.Code)
}

// optional string Message = 2;
inline void RegisterResponseWithNonce::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterResponseWithNonce::message() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterResponseWithNonce.Message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterResponseWithNonce::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterResponseWithNonce.Message)
}
inline void RegisterResponseWithNonce::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.RegisterResponseWithNonce.Message)
}
inline void RegisterResponseWithNonce::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.RegisterResponseWithNonce.Message)
}
inline ::std::string* RegisterResponseWithNonce::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.RegisterResponseWithNonce.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterResponseWithNonce::release_message() {
  // @@protoc_insertion_point(field_release:goprotobuf.RegisterResponseWithNonce.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterResponseWithNonce::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.RegisterResponseWithNonce.Message)
}

// optional string nonce = 3;
inline void RegisterResponseWithNonce::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterResponseWithNonce::nonce() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterResponseWithNonce.nonce)
  return nonce_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterResponseWithNonce::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterResponseWithNonce.nonce)
}
inline void RegisterResponseWithNonce::set_nonce(const char* value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.RegisterResponseWithNonce.nonce)
}
inline void RegisterResponseWithNonce::set_nonce(const char* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.RegisterResponseWithNonce.nonce)
}
inline ::std::string* RegisterResponseWithNonce::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.RegisterResponseWithNonce.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterResponseWithNonce::release_nonce() {
  // @@protoc_insertion_point(field_release:goprotobuf.RegisterResponseWithNonce.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterResponseWithNonce::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.RegisterResponseWithNonce.nonce)
}

// -------------------------------------------------------------------

// RegisterRequestWithAuth

// optional string DeviceID = 1;
inline void RegisterRequestWithAuth::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterRequestWithAuth::deviceid() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterRequestWithAuth.DeviceID)
  return deviceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequestWithAuth::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterRequestWithAuth.DeviceID)
}
inline void RegisterRequestWithAuth::set_deviceid(const char* value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.RegisterRequestWithAuth.DeviceID)
}
inline void RegisterRequestWithAuth::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.RegisterRequestWithAuth.DeviceID)
}
inline ::std::string* RegisterRequestWithAuth::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.RegisterRequestWithAuth.DeviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequestWithAuth::release_deviceid() {
  // @@protoc_insertion_point(field_release:goprotobuf.RegisterRequestWithAuth.DeviceID)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequestWithAuth::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.RegisterRequestWithAuth.DeviceID)
}

// optional int64 RegisterTime = 2;
inline void RegisterRequestWithAuth::clear_registertime() {
  registertime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RegisterRequestWithAuth::registertime() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterRequestWithAuth.RegisterTime)
  return registertime_;
}
inline void RegisterRequestWithAuth::set_registertime(::google::protobuf::int64 value) {
  
  registertime_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterRequestWithAuth.RegisterTime)
}

// optional string Auth = 3;
inline void RegisterRequestWithAuth::clear_auth() {
  auth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterRequestWithAuth::auth() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterRequestWithAuth.Auth)
  return auth_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequestWithAuth::set_auth(const ::std::string& value) {
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterRequestWithAuth.Auth)
}
inline void RegisterRequestWithAuth::set_auth(const char* value) {
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.RegisterRequestWithAuth.Auth)
}
inline void RegisterRequestWithAuth::set_auth(const char* value, size_t size) {
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.RegisterRequestWithAuth.Auth)
}
inline ::std::string* RegisterRequestWithAuth::mutable_auth() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.RegisterRequestWithAuth.Auth)
  return auth_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequestWithAuth::release_auth() {
  // @@protoc_insertion_point(field_release:goprotobuf.RegisterRequestWithAuth.Auth)
  
  return auth_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequestWithAuth::set_allocated_auth(::std::string* auth) {
  if (auth != NULL) {
    
  } else {
    
  }
  auth_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.RegisterRequestWithAuth.Auth)
}

// optional int32 PingSpan = 4;
inline void RegisterRequestWithAuth::clear_pingspan() {
  pingspan_ = 0;
}
inline ::google::protobuf::int32 RegisterRequestWithAuth::pingspan() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterRequestWithAuth.PingSpan)
  return pingspan_;
}
inline void RegisterRequestWithAuth::set_pingspan(::google::protobuf::int32 value) {
  
  pingspan_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterRequestWithAuth.PingSpan)
}

// -------------------------------------------------------------------

// RegisterResponse

// optional int32 Code = 1;
inline void RegisterResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 RegisterResponse::code() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterResponse.Code)
  return code_;
}
inline void RegisterResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterResponse.Code)
}

// optional string Message = 2;
inline void RegisterResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterResponse::message() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterResponse.Message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterResponse.Message)
}
inline void RegisterResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.RegisterResponse.Message)
}
inline void RegisterResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.RegisterResponse.Message)
}
inline ::std::string* RegisterResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.RegisterResponse.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterResponse::release_message() {
  // @@protoc_insertion_point(field_release:goprotobuf.RegisterResponse.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.RegisterResponse.Message)
}

// -------------------------------------------------------------------

// UploadDeviceInfoRequest

// optional string DeviceID = 1;
inline void UploadDeviceInfoRequest::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadDeviceInfoRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:goprotobuf.UploadDeviceInfoRequest.DeviceID)
  return deviceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadDeviceInfoRequest::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.UploadDeviceInfoRequest.DeviceID)
}
inline void UploadDeviceInfoRequest::set_deviceid(const char* value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.UploadDeviceInfoRequest.DeviceID)
}
inline void UploadDeviceInfoRequest::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.UploadDeviceInfoRequest.DeviceID)
}
inline ::std::string* UploadDeviceInfoRequest::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.UploadDeviceInfoRequest.DeviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadDeviceInfoRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:goprotobuf.UploadDeviceInfoRequest.DeviceID)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadDeviceInfoRequest::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.UploadDeviceInfoRequest.DeviceID)
}

// optional string FirmwareVersion = 2;
inline void UploadDeviceInfoRequest::clear_firmwareversion() {
  firmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadDeviceInfoRequest::firmwareversion() const {
  // @@protoc_insertion_point(field_get:goprotobuf.UploadDeviceInfoRequest.FirmwareVersion)
  return firmwareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadDeviceInfoRequest::set_firmwareversion(const ::std::string& value) {
  
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.UploadDeviceInfoRequest.FirmwareVersion)
}
inline void UploadDeviceInfoRequest::set_firmwareversion(const char* value) {
  
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.UploadDeviceInfoRequest.FirmwareVersion)
}
inline void UploadDeviceInfoRequest::set_firmwareversion(const char* value, size_t size) {
  
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.UploadDeviceInfoRequest.FirmwareVersion)
}
inline ::std::string* UploadDeviceInfoRequest::mutable_firmwareversion() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.UploadDeviceInfoRequest.FirmwareVersion)
  return firmwareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadDeviceInfoRequest::release_firmwareversion() {
  // @@protoc_insertion_point(field_release:goprotobuf.UploadDeviceInfoRequest.FirmwareVersion)
  
  return firmwareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadDeviceInfoRequest::set_allocated_firmwareversion(::std::string* firmwareversion) {
  if (firmwareversion != NULL) {
    
  } else {
    
  }
  firmwareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmwareversion);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.UploadDeviceInfoRequest.FirmwareVersion)
}

// optional string FirmwareMD5 = 3;
inline void UploadDeviceInfoRequest::clear_firmwaremd5() {
  firmwaremd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadDeviceInfoRequest::firmwaremd5() const {
  // @@protoc_insertion_point(field_get:goprotobuf.UploadDeviceInfoRequest.FirmwareMD5)
  return firmwaremd5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadDeviceInfoRequest::set_firmwaremd5(const ::std::string& value) {
  
  firmwaremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.UploadDeviceInfoRequest.FirmwareMD5)
}
inline void UploadDeviceInfoRequest::set_firmwaremd5(const char* value) {
  
  firmwaremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.UploadDeviceInfoRequest.FirmwareMD5)
}
inline void UploadDeviceInfoRequest::set_firmwaremd5(const char* value, size_t size) {
  
  firmwaremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.UploadDeviceInfoRequest.FirmwareMD5)
}
inline ::std::string* UploadDeviceInfoRequest::mutable_firmwaremd5() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.UploadDeviceInfoRequest.FirmwareMD5)
  return firmwaremd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadDeviceInfoRequest::release_firmwaremd5() {
  // @@protoc_insertion_point(field_release:goprotobuf.UploadDeviceInfoRequest.FirmwareMD5)
  
  return firmwaremd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadDeviceInfoRequest::set_allocated_firmwaremd5(::std::string* firmwaremd5) {
  if (firmwaremd5 != NULL) {
    
  } else {
    
  }
  firmwaremd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmwaremd5);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.UploadDeviceInfoRequest.FirmwareMD5)
}

// optional string SoftwareVersion = 4;
inline void UploadDeviceInfoRequest::clear_softwareversion() {
  softwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadDeviceInfoRequest::softwareversion() const {
  // @@protoc_insertion_point(field_get:goprotobuf.UploadDeviceInfoRequest.SoftwareVersion)
  return softwareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadDeviceInfoRequest::set_softwareversion(const ::std::string& value) {
  
  softwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.UploadDeviceInfoRequest.SoftwareVersion)
}
inline void UploadDeviceInfoRequest::set_softwareversion(const char* value) {
  
  softwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.UploadDeviceInfoRequest.SoftwareVersion)
}
inline void UploadDeviceInfoRequest::set_softwareversion(const char* value, size_t size) {
  
  softwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.UploadDeviceInfoRequest.SoftwareVersion)
}
inline ::std::string* UploadDeviceInfoRequest::mutable_softwareversion() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.UploadDeviceInfoRequest.SoftwareVersion)
  return softwareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadDeviceInfoRequest::release_softwareversion() {
  // @@protoc_insertion_point(field_release:goprotobuf.UploadDeviceInfoRequest.SoftwareVersion)
  
  return softwareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadDeviceInfoRequest::set_allocated_softwareversion(::std::string* softwareversion) {
  if (softwareversion != NULL) {
    
  } else {
    
  }
  softwareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), softwareversion);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.UploadDeviceInfoRequest.SoftwareVersion)
}

// optional string SoftwareMD5 = 5;
inline void UploadDeviceInfoRequest::clear_softwaremd5() {
  softwaremd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadDeviceInfoRequest::softwaremd5() const {
  // @@protoc_insertion_point(field_get:goprotobuf.UploadDeviceInfoRequest.SoftwareMD5)
  return softwaremd5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadDeviceInfoRequest::set_softwaremd5(const ::std::string& value) {
  
  softwaremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.UploadDeviceInfoRequest.SoftwareMD5)
}
inline void UploadDeviceInfoRequest::set_softwaremd5(const char* value) {
  
  softwaremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.UploadDeviceInfoRequest.SoftwareMD5)
}
inline void UploadDeviceInfoRequest::set_softwaremd5(const char* value, size_t size) {
  
  softwaremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.UploadDeviceInfoRequest.SoftwareMD5)
}
inline ::std::string* UploadDeviceInfoRequest::mutable_softwaremd5() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.UploadDeviceInfoRequest.SoftwareMD5)
  return softwaremd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadDeviceInfoRequest::release_softwaremd5() {
  // @@protoc_insertion_point(field_release:goprotobuf.UploadDeviceInfoRequest.SoftwareMD5)
  
  return softwaremd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadDeviceInfoRequest::set_allocated_softwaremd5(::std::string* softwaremd5) {
  if (softwaremd5 != NULL) {
    
  } else {
    
  }
  softwaremd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), softwaremd5);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.UploadDeviceInfoRequest.SoftwareMD5)
}

// -------------------------------------------------------------------

// UploadDeviceInfoResponse

// optional int32 Code = 1;
inline void UploadDeviceInfoResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 UploadDeviceInfoResponse::code() const {
  // @@protoc_insertion_point(field_get:goprotobuf.UploadDeviceInfoResponse.Code)
  return code_;
}
inline void UploadDeviceInfoResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.UploadDeviceInfoResponse.Code)
}

// optional string Message = 2;
inline void UploadDeviceInfoResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadDeviceInfoResponse::message() const {
  // @@protoc_insertion_point(field_get:goprotobuf.UploadDeviceInfoResponse.Message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadDeviceInfoResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.UploadDeviceInfoResponse.Message)
}
inline void UploadDeviceInfoResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.UploadDeviceInfoResponse.Message)
}
inline void UploadDeviceInfoResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.UploadDeviceInfoResponse.Message)
}
inline ::std::string* UploadDeviceInfoResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.UploadDeviceInfoResponse.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadDeviceInfoResponse::release_message() {
  // @@protoc_insertion_point(field_release:goprotobuf.UploadDeviceInfoResponse.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadDeviceInfoResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.UploadDeviceInfoResponse.Message)
}

// -------------------------------------------------------------------

// Ping

// optional int64 Time = 1;
inline void Ping::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Ping::time() const {
  // @@protoc_insertion_point(field_get:goprotobuf.Ping.Time)
  return time_;
}
inline void Ping::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.Ping.Time)
}

// -------------------------------------------------------------------

// Pong

// optional int32 Code = 1;
inline void Pong::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 Pong::code() const {
  // @@protoc_insertion_point(field_get:goprotobuf.Pong.Code)
  return code_;
}
inline void Pong::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.Pong.Code)
}

// optional string Message = 2;
inline void Pong::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pong::message() const {
  // @@protoc_insertion_point(field_get:goprotobuf.Pong.Message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pong::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.Pong.Message)
}
inline void Pong::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.Pong.Message)
}
inline void Pong::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.Pong.Message)
}
inline ::std::string* Pong::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.Pong.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pong::release_message() {
  // @@protoc_insertion_point(field_release:goprotobuf.Pong.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pong::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.Pong.Message)
}

// -------------------------------------------------------------------

// DeviceUpdateRequest

// optional int32 UpdateType = 1;
inline void DeviceUpdateRequest::clear_updatetype() {
  updatetype_ = 0;
}
inline ::google::protobuf::int32 DeviceUpdateRequest::updatetype() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateRequest.UpdateType)
  return updatetype_;
}
inline void DeviceUpdateRequest::set_updatetype(::google::protobuf::int32 value) {
  
  updatetype_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateRequest.UpdateType)
}

// optional string wareURL = 2;
inline void DeviceUpdateRequest::clear_wareurl() {
  wareurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceUpdateRequest::wareurl() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateRequest.wareURL)
  return wareurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceUpdateRequest::set_wareurl(const ::std::string& value) {
  
  wareurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateRequest.wareURL)
}
inline void DeviceUpdateRequest::set_wareurl(const char* value) {
  
  wareurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.DeviceUpdateRequest.wareURL)
}
inline void DeviceUpdateRequest::set_wareurl(const char* value, size_t size) {
  
  wareurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.DeviceUpdateRequest.wareURL)
}
inline ::std::string* DeviceUpdateRequest::mutable_wareurl() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.DeviceUpdateRequest.wareURL)
  return wareurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceUpdateRequest::release_wareurl() {
  // @@protoc_insertion_point(field_release:goprotobuf.DeviceUpdateRequest.wareURL)
  
  return wareurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceUpdateRequest::set_allocated_wareurl(::std::string* wareurl) {
  if (wareurl != NULL) {
    
  } else {
    
  }
  wareurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wareurl);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.DeviceUpdateRequest.wareURL)
}

// optional string wareVersion = 3;
inline void DeviceUpdateRequest::clear_wareversion() {
  wareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceUpdateRequest::wareversion() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateRequest.wareVersion)
  return wareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceUpdateRequest::set_wareversion(const ::std::string& value) {
  
  wareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateRequest.wareVersion)
}
inline void DeviceUpdateRequest::set_wareversion(const char* value) {
  
  wareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.DeviceUpdateRequest.wareVersion)
}
inline void DeviceUpdateRequest::set_wareversion(const char* value, size_t size) {
  
  wareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.DeviceUpdateRequest.wareVersion)
}
inline ::std::string* DeviceUpdateRequest::mutable_wareversion() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.DeviceUpdateRequest.wareVersion)
  return wareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceUpdateRequest::release_wareversion() {
  // @@protoc_insertion_point(field_release:goprotobuf.DeviceUpdateRequest.wareVersion)
  
  return wareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceUpdateRequest::set_allocated_wareversion(::std::string* wareversion) {
  if (wareversion != NULL) {
    
  } else {
    
  }
  wareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wareversion);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.DeviceUpdateRequest.wareVersion)
}

// optional string wareMD5 = 4;
inline void DeviceUpdateRequest::clear_waremd5() {
  waremd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceUpdateRequest::waremd5() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateRequest.wareMD5)
  return waremd5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceUpdateRequest::set_waremd5(const ::std::string& value) {
  
  waremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateRequest.wareMD5)
}
inline void DeviceUpdateRequest::set_waremd5(const char* value) {
  
  waremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.DeviceUpdateRequest.wareMD5)
}
inline void DeviceUpdateRequest::set_waremd5(const char* value, size_t size) {
  
  waremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.DeviceUpdateRequest.wareMD5)
}
inline ::std::string* DeviceUpdateRequest::mutable_waremd5() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.DeviceUpdateRequest.wareMD5)
  return waremd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceUpdateRequest::release_waremd5() {
  // @@protoc_insertion_point(field_release:goprotobuf.DeviceUpdateRequest.wareMD5)
  
  return waremd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceUpdateRequest::set_allocated_waremd5(::std::string* waremd5) {
  if (waremd5 != NULL) {
    
  } else {
    
  }
  waremd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), waremd5);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.DeviceUpdateRequest.wareMD5)
}

// optional string TaskID = 5;
inline void DeviceUpdateRequest::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceUpdateRequest::taskid() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateRequest.TaskID)
  return taskid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceUpdateRequest::set_taskid(const ::std::string& value) {
  
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateRequest.TaskID)
}
inline void DeviceUpdateRequest::set_taskid(const char* value) {
  
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.DeviceUpdateRequest.TaskID)
}
inline void DeviceUpdateRequest::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.DeviceUpdateRequest.TaskID)
}
inline ::std::string* DeviceUpdateRequest::mutable_taskid() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.DeviceUpdateRequest.TaskID)
  return taskid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceUpdateRequest::release_taskid() {
  // @@protoc_insertion_point(field_release:goprotobuf.DeviceUpdateRequest.TaskID)
  
  return taskid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceUpdateRequest::set_allocated_taskid(::std::string* taskid) {
  if (taskid != NULL) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.DeviceUpdateRequest.TaskID)
}

// -------------------------------------------------------------------

// DeviceUpdateResponse

// optional int32 Code = 1;
inline void DeviceUpdateResponse::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 DeviceUpdateResponse::code() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateResponse.Code)
  return code_;
}
inline void DeviceUpdateResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateResponse.Code)
}

// optional string Message = 2;
inline void DeviceUpdateResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceUpdateResponse::message() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateResponse.Message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceUpdateResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateResponse.Message)
}
inline void DeviceUpdateResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.DeviceUpdateResponse.Message)
}
inline void DeviceUpdateResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.DeviceUpdateResponse.Message)
}
inline ::std::string* DeviceUpdateResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.DeviceUpdateResponse.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceUpdateResponse::release_message() {
  // @@protoc_insertion_point(field_release:goprotobuf.DeviceUpdateResponse.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceUpdateResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.DeviceUpdateResponse.Message)
}

// -------------------------------------------------------------------

// DeviceUpdateNotify

// optional int32 UpdateType = 1;
inline void DeviceUpdateNotify::clear_updatetype() {
  updatetype_ = 0;
}
inline ::google::protobuf::int32 DeviceUpdateNotify::updatetype() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateNotify.UpdateType)
  return updatetype_;
}
inline void DeviceUpdateNotify::set_updatetype(::google::protobuf::int32 value) {
  
  updatetype_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateNotify.UpdateType)
}

// optional string TastID = 2;
inline void DeviceUpdateNotify::clear_tastid() {
  tastid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceUpdateNotify::tastid() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateNotify.TastID)
  return tastid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceUpdateNotify::set_tastid(const ::std::string& value) {
  
  tastid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateNotify.TastID)
}
inline void DeviceUpdateNotify::set_tastid(const char* value) {
  
  tastid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.DeviceUpdateNotify.TastID)
}
inline void DeviceUpdateNotify::set_tastid(const char* value, size_t size) {
  
  tastid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.DeviceUpdateNotify.TastID)
}
inline ::std::string* DeviceUpdateNotify::mutable_tastid() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.DeviceUpdateNotify.TastID)
  return tastid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceUpdateNotify::release_tastid() {
  // @@protoc_insertion_point(field_release:goprotobuf.DeviceUpdateNotify.TastID)
  
  return tastid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceUpdateNotify::set_allocated_tastid(::std::string* tastid) {
  if (tastid != NULL) {
    
  } else {
    
  }
  tastid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tastid);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.DeviceUpdateNotify.TastID)
}

// optional string wareVersion = 3;
inline void DeviceUpdateNotify::clear_wareversion() {
  wareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceUpdateNotify::wareversion() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateNotify.wareVersion)
  return wareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceUpdateNotify::set_wareversion(const ::std::string& value) {
  
  wareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateNotify.wareVersion)
}
inline void DeviceUpdateNotify::set_wareversion(const char* value) {
  
  wareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.DeviceUpdateNotify.wareVersion)
}
inline void DeviceUpdateNotify::set_wareversion(const char* value, size_t size) {
  
  wareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.DeviceUpdateNotify.wareVersion)
}
inline ::std::string* DeviceUpdateNotify::mutable_wareversion() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.DeviceUpdateNotify.wareVersion)
  return wareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceUpdateNotify::release_wareversion() {
  // @@protoc_insertion_point(field_release:goprotobuf.DeviceUpdateNotify.wareVersion)
  
  return wareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceUpdateNotify::set_allocated_wareversion(::std::string* wareversion) {
  if (wareversion != NULL) {
    
  } else {
    
  }
  wareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wareversion);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.DeviceUpdateNotify.wareVersion)
}

// optional string wareMD5 = 4;
inline void DeviceUpdateNotify::clear_waremd5() {
  waremd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceUpdateNotify::waremd5() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateNotify.wareMD5)
  return waremd5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceUpdateNotify::set_waremd5(const ::std::string& value) {
  
  waremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateNotify.wareMD5)
}
inline void DeviceUpdateNotify::set_waremd5(const char* value) {
  
  waremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.DeviceUpdateNotify.wareMD5)
}
inline void DeviceUpdateNotify::set_waremd5(const char* value, size_t size) {
  
  waremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.DeviceUpdateNotify.wareMD5)
}
inline ::std::string* DeviceUpdateNotify::mutable_waremd5() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.DeviceUpdateNotify.wareMD5)
  return waremd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceUpdateNotify::release_waremd5() {
  // @@protoc_insertion_point(field_release:goprotobuf.DeviceUpdateNotify.wareMD5)
  
  return waremd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceUpdateNotify::set_allocated_waremd5(::std::string* waremd5) {
  if (waremd5 != NULL) {
    
  } else {
    
  }
  waremd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), waremd5);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.DeviceUpdateNotify.wareMD5)
}

// optional int64 UpdateTime = 5;
inline void DeviceUpdateNotify::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DeviceUpdateNotify::updatetime() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateNotify.UpdateTime)
  return updatetime_;
}
inline void DeviceUpdateNotify::set_updatetime(::google::protobuf::int64 value) {
  
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateNotify.UpdateTime)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace goprotobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mojingCMD_2eproto__INCLUDED
