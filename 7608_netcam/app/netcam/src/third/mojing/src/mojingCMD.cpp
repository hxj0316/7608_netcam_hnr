// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mojingCMD.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mojingCMD.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace goprotobuf {

void protobuf_ShutdownFile_mojingCMD_2eproto() {
  delete RegisterRequest::default_instance_;
  delete RegisterResponseWithNonce::default_instance_;
  delete RegisterRequestWithAuth::default_instance_;
  delete RegisterResponse::default_instance_;
  delete UploadDeviceInfoRequest::default_instance_;
  delete UploadDeviceInfoResponse::default_instance_;
  delete Ping::default_instance_;
  delete Pong::default_instance_;
  delete DeviceUpdateRequest::default_instance_;
  delete DeviceUpdateResponse::default_instance_;
  delete DeviceUpdateNotify::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_mojingCMD_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_mojingCMD_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  RegisterRequest::default_instance_ = new RegisterRequest();
  RegisterResponseWithNonce::default_instance_ = new RegisterResponseWithNonce();
  RegisterRequestWithAuth::default_instance_ = new RegisterRequestWithAuth();
  RegisterResponse::default_instance_ = new RegisterResponse();
  UploadDeviceInfoRequest::default_instance_ = new UploadDeviceInfoRequest();
  UploadDeviceInfoResponse::default_instance_ = new UploadDeviceInfoResponse();
  Ping::default_instance_ = new Ping();
  Pong::default_instance_ = new Pong();
  DeviceUpdateRequest::default_instance_ = new DeviceUpdateRequest();
  DeviceUpdateResponse::default_instance_ = new DeviceUpdateResponse();
  DeviceUpdateNotify::default_instance_ = new DeviceUpdateNotify();
  RegisterRequest::default_instance_->InitAsDefaultInstance();
  RegisterResponseWithNonce::default_instance_->InitAsDefaultInstance();
  RegisterRequestWithAuth::default_instance_->InitAsDefaultInstance();
  RegisterResponse::default_instance_->InitAsDefaultInstance();
  UploadDeviceInfoRequest::default_instance_->InitAsDefaultInstance();
  UploadDeviceInfoResponse::default_instance_->InitAsDefaultInstance();
  Ping::default_instance_->InitAsDefaultInstance();
  Pong::default_instance_->InitAsDefaultInstance();
  DeviceUpdateRequest::default_instance_->InitAsDefaultInstance();
  DeviceUpdateResponse::default_instance_->InitAsDefaultInstance();
  DeviceUpdateNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mojingCMD_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_mojingCMD_2eproto_once_);
void protobuf_AddDesc_mojingCMD_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_mojingCMD_2eproto_once_,
                 &protobuf_AddDesc_mojingCMD_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mojingCMD_2eproto {
  StaticDescriptorInitializer_mojingCMD_2eproto() {
    protobuf_AddDesc_mojingCMD_2eproto();
  }
} static_descriptor_initializer_mojingCMD_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterRequest::kDeviceIDFieldNumber;
const int RegisterRequest::kRegisterTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterRequest::RegisterRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goprotobuf.RegisterRequest)
}

void RegisterRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:goprotobuf.RegisterRequest)
}

void RegisterRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  registertime_ = GOOGLE_LONGLONG(0);
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:goprotobuf.RegisterRequest)
  SharedDtor();
}

void RegisterRequest::SharedDtor() {
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegisterRequest& RegisterRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mojingCMD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mojingCMD_2eproto();
#endif
  return *default_instance_;
}

RegisterRequest* RegisterRequest::default_instance_ = NULL;

RegisterRequest* RegisterRequest::New(::google::protobuf::Arena* arena) const {
  RegisterRequest* n = new RegisterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:goprotobuf.RegisterRequest)
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  registertime_ = GOOGLE_LONGLONG(0);
}

bool RegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goprotobuf.RegisterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DeviceID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.RegisterRequest.DeviceID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RegisterTime;
        break;
      }

      // optional int64 RegisterTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RegisterTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &registertime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goprotobuf.RegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goprotobuf.RegisterRequest)
  return false;
#undef DO_
}

void RegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goprotobuf.RegisterRequest)
  // optional string DeviceID = 1;
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.RegisterRequest.DeviceID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deviceid(), output);
  }

  // optional int64 RegisterTime = 2;
  if (this->registertime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->registertime(), output);
  }

  // @@protoc_insertion_point(serialize_end:goprotobuf.RegisterRequest)
}

int RegisterRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:goprotobuf.RegisterRequest)
  int total_size = 0;

  // optional string DeviceID = 1;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceid());
  }

  // optional int64 RegisterTime = 2;
  if (this->registertime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->registertime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegisterRequest*>(&from));
}

void RegisterRequest::MergeFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goprotobuf.RegisterRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.registertime() != 0) {
    set_registertime(from.registertime());
  }
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goprotobuf.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {

  return true;
}

void RegisterRequest::Swap(RegisterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterRequest::InternalSwap(RegisterRequest* other) {
  deviceid_.Swap(&other->deviceid_);
  std::swap(registertime_, other->registertime_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RegisterRequest::GetTypeName() const {
  return "goprotobuf.RegisterRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterRequest

// optional string DeviceID = 1;
void RegisterRequest::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterRequest.DeviceID)
  return deviceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterRequest.DeviceID)
}
 void RegisterRequest::set_deviceid(const char* value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.RegisterRequest.DeviceID)
}
 void RegisterRequest::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.RegisterRequest.DeviceID)
}
 ::std::string* RegisterRequest::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.RegisterRequest.DeviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:goprotobuf.RegisterRequest.DeviceID)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequest::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.RegisterRequest.DeviceID)
}

// optional int64 RegisterTime = 2;
void RegisterRequest::clear_registertime() {
  registertime_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RegisterRequest::registertime() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterRequest.RegisterTime)
  return registertime_;
}
 void RegisterRequest::set_registertime(::google::protobuf::int64 value) {
  
  registertime_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterRequest.RegisterTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterResponseWithNonce::kCodeFieldNumber;
const int RegisterResponseWithNonce::kMessageFieldNumber;
const int RegisterResponseWithNonce::kNonceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterResponseWithNonce::RegisterResponseWithNonce()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goprotobuf.RegisterResponseWithNonce)
}

void RegisterResponseWithNonce::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterResponseWithNonce::RegisterResponseWithNonce(const RegisterResponseWithNonce& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:goprotobuf.RegisterResponseWithNonce)
}

void RegisterResponseWithNonce::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RegisterResponseWithNonce::~RegisterResponseWithNonce() {
  // @@protoc_insertion_point(destructor:goprotobuf.RegisterResponseWithNonce)
  SharedDtor();
}

void RegisterResponseWithNonce::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegisterResponseWithNonce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegisterResponseWithNonce& RegisterResponseWithNonce::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mojingCMD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mojingCMD_2eproto();
#endif
  return *default_instance_;
}

RegisterResponseWithNonce* RegisterResponseWithNonce::default_instance_ = NULL;

RegisterResponseWithNonce* RegisterResponseWithNonce::New(::google::protobuf::Arena* arena) const {
  RegisterResponseWithNonce* n = new RegisterResponseWithNonce;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterResponseWithNonce::Clear() {
// @@protoc_insertion_point(message_clear_start:goprotobuf.RegisterResponseWithNonce)
  code_ = 0;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RegisterResponseWithNonce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goprotobuf.RegisterResponseWithNonce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Message;
        break;
      }

      // optional string Message = 2;
      case 2: {
        if (tag == 18) {
         parse_Message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.RegisterResponseWithNonce.Message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nonce;
        break;
      }

      // optional string nonce = 3;
      case 3: {
        if (tag == 26) {
         parse_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nonce()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nonce().data(), this->nonce().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.RegisterResponseWithNonce.nonce"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goprotobuf.RegisterResponseWithNonce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goprotobuf.RegisterResponseWithNonce)
  return false;
#undef DO_
}

void RegisterResponseWithNonce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goprotobuf.RegisterResponseWithNonce)
  // optional int32 Code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string Message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.RegisterResponseWithNonce.Message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional string nonce = 3;
  if (this->nonce().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nonce().data(), this->nonce().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.RegisterResponseWithNonce.nonce");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nonce(), output);
  }

  // @@protoc_insertion_point(serialize_end:goprotobuf.RegisterResponseWithNonce)
}

int RegisterResponseWithNonce::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:goprotobuf.RegisterResponseWithNonce)
  int total_size = 0;

  // optional int32 Code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // optional string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // optional string nonce = 3;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nonce());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterResponseWithNonce::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegisterResponseWithNonce*>(&from));
}

void RegisterResponseWithNonce::MergeFrom(const RegisterResponseWithNonce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goprotobuf.RegisterResponseWithNonce)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.nonce().size() > 0) {

    nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
}

void RegisterResponseWithNonce::CopyFrom(const RegisterResponseWithNonce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goprotobuf.RegisterResponseWithNonce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponseWithNonce::IsInitialized() const {

  return true;
}

void RegisterResponseWithNonce::Swap(RegisterResponseWithNonce* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterResponseWithNonce::InternalSwap(RegisterResponseWithNonce* other) {
  std::swap(code_, other->code_);
  message_.Swap(&other->message_);
  nonce_.Swap(&other->nonce_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RegisterResponseWithNonce::GetTypeName() const {
  return "goprotobuf.RegisterResponseWithNonce";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterResponseWithNonce

// optional int32 Code = 1;
void RegisterResponseWithNonce::clear_code() {
  code_ = 0;
}
 ::google::protobuf::int32 RegisterResponseWithNonce::code() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterResponseWithNonce.Code)
  return code_;
}
 void RegisterResponseWithNonce::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterResponseWithNonce.Code)
}

// optional string Message = 2;
void RegisterResponseWithNonce::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterResponseWithNonce::message() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterResponseWithNonce.Message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterResponseWithNonce::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterResponseWithNonce.Message)
}
 void RegisterResponseWithNonce::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.RegisterResponseWithNonce.Message)
}
 void RegisterResponseWithNonce::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.RegisterResponseWithNonce.Message)
}
 ::std::string* RegisterResponseWithNonce::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.RegisterResponseWithNonce.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterResponseWithNonce::release_message() {
  // @@protoc_insertion_point(field_release:goprotobuf.RegisterResponseWithNonce.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterResponseWithNonce::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.RegisterResponseWithNonce.Message)
}

// optional string nonce = 3;
void RegisterResponseWithNonce::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterResponseWithNonce::nonce() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterResponseWithNonce.nonce)
  return nonce_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterResponseWithNonce::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterResponseWithNonce.nonce)
}
 void RegisterResponseWithNonce::set_nonce(const char* value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.RegisterResponseWithNonce.nonce)
}
 void RegisterResponseWithNonce::set_nonce(const char* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.RegisterResponseWithNonce.nonce)
}
 ::std::string* RegisterResponseWithNonce::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.RegisterResponseWithNonce.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterResponseWithNonce::release_nonce() {
  // @@protoc_insertion_point(field_release:goprotobuf.RegisterResponseWithNonce.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterResponseWithNonce::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.RegisterResponseWithNonce.nonce)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterRequestWithAuth::kDeviceIDFieldNumber;
const int RegisterRequestWithAuth::kRegisterTimeFieldNumber;
const int RegisterRequestWithAuth::kAuthFieldNumber;
const int RegisterRequestWithAuth::kPingSpanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterRequestWithAuth::RegisterRequestWithAuth()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goprotobuf.RegisterRequestWithAuth)
}

void RegisterRequestWithAuth::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterRequestWithAuth::RegisterRequestWithAuth(const RegisterRequestWithAuth& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:goprotobuf.RegisterRequestWithAuth)
}

void RegisterRequestWithAuth::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  registertime_ = GOOGLE_LONGLONG(0);
  auth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pingspan_ = 0;
}

RegisterRequestWithAuth::~RegisterRequestWithAuth() {
  // @@protoc_insertion_point(destructor:goprotobuf.RegisterRequestWithAuth)
  SharedDtor();
}

void RegisterRequestWithAuth::SharedDtor() {
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegisterRequestWithAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegisterRequestWithAuth& RegisterRequestWithAuth::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mojingCMD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mojingCMD_2eproto();
#endif
  return *default_instance_;
}

RegisterRequestWithAuth* RegisterRequestWithAuth::default_instance_ = NULL;

RegisterRequestWithAuth* RegisterRequestWithAuth::New(::google::protobuf::Arena* arena) const {
  RegisterRequestWithAuth* n = new RegisterRequestWithAuth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterRequestWithAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:goprotobuf.RegisterRequestWithAuth)
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  registertime_ = GOOGLE_LONGLONG(0);
  auth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pingspan_ = 0;
}

bool RegisterRequestWithAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goprotobuf.RegisterRequestWithAuth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DeviceID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.RegisterRequestWithAuth.DeviceID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RegisterTime;
        break;
      }

      // optional int64 RegisterTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RegisterTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &registertime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Auth;
        break;
      }

      // optional string Auth = 3;
      case 3: {
        if (tag == 26) {
         parse_Auth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->auth().data(), this->auth().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.RegisterRequestWithAuth.Auth"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PingSpan;
        break;
      }

      // optional int32 PingSpan = 4;
      case 4: {
        if (tag == 32) {
         parse_PingSpan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pingspan_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goprotobuf.RegisterRequestWithAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goprotobuf.RegisterRequestWithAuth)
  return false;
#undef DO_
}

void RegisterRequestWithAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goprotobuf.RegisterRequestWithAuth)
  // optional string DeviceID = 1;
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.RegisterRequestWithAuth.DeviceID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deviceid(), output);
  }

  // optional int64 RegisterTime = 2;
  if (this->registertime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->registertime(), output);
  }

  // optional string Auth = 3;
  if (this->auth().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth().data(), this->auth().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.RegisterRequestWithAuth.Auth");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->auth(), output);
  }

  // optional int32 PingSpan = 4;
  if (this->pingspan() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pingspan(), output);
  }

  // @@protoc_insertion_point(serialize_end:goprotobuf.RegisterRequestWithAuth)
}

int RegisterRequestWithAuth::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:goprotobuf.RegisterRequestWithAuth)
  int total_size = 0;

  // optional string DeviceID = 1;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceid());
  }

  // optional int64 RegisterTime = 2;
  if (this->registertime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->registertime());
  }

  // optional string Auth = 3;
  if (this->auth().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth());
  }

  // optional int32 PingSpan = 4;
  if (this->pingspan() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pingspan());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRequestWithAuth::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegisterRequestWithAuth*>(&from));
}

void RegisterRequestWithAuth::MergeFrom(const RegisterRequestWithAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goprotobuf.RegisterRequestWithAuth)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.registertime() != 0) {
    set_registertime(from.registertime());
  }
  if (from.auth().size() > 0) {

    auth_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_);
  }
  if (from.pingspan() != 0) {
    set_pingspan(from.pingspan());
  }
}

void RegisterRequestWithAuth::CopyFrom(const RegisterRequestWithAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goprotobuf.RegisterRequestWithAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequestWithAuth::IsInitialized() const {

  return true;
}

void RegisterRequestWithAuth::Swap(RegisterRequestWithAuth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterRequestWithAuth::InternalSwap(RegisterRequestWithAuth* other) {
  deviceid_.Swap(&other->deviceid_);
  std::swap(registertime_, other->registertime_);
  auth_.Swap(&other->auth_);
  std::swap(pingspan_, other->pingspan_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RegisterRequestWithAuth::GetTypeName() const {
  return "goprotobuf.RegisterRequestWithAuth";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterRequestWithAuth

// optional string DeviceID = 1;
void RegisterRequestWithAuth::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterRequestWithAuth::deviceid() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterRequestWithAuth.DeviceID)
  return deviceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequestWithAuth::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterRequestWithAuth.DeviceID)
}
 void RegisterRequestWithAuth::set_deviceid(const char* value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.RegisterRequestWithAuth.DeviceID)
}
 void RegisterRequestWithAuth::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.RegisterRequestWithAuth.DeviceID)
}
 ::std::string* RegisterRequestWithAuth::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.RegisterRequestWithAuth.DeviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequestWithAuth::release_deviceid() {
  // @@protoc_insertion_point(field_release:goprotobuf.RegisterRequestWithAuth.DeviceID)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequestWithAuth::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.RegisterRequestWithAuth.DeviceID)
}

// optional int64 RegisterTime = 2;
void RegisterRequestWithAuth::clear_registertime() {
  registertime_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 RegisterRequestWithAuth::registertime() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterRequestWithAuth.RegisterTime)
  return registertime_;
}
 void RegisterRequestWithAuth::set_registertime(::google::protobuf::int64 value) {
  
  registertime_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterRequestWithAuth.RegisterTime)
}

// optional string Auth = 3;
void RegisterRequestWithAuth::clear_auth() {
  auth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterRequestWithAuth::auth() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterRequestWithAuth.Auth)
  return auth_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequestWithAuth::set_auth(const ::std::string& value) {
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterRequestWithAuth.Auth)
}
 void RegisterRequestWithAuth::set_auth(const char* value) {
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.RegisterRequestWithAuth.Auth)
}
 void RegisterRequestWithAuth::set_auth(const char* value, size_t size) {
  
  auth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.RegisterRequestWithAuth.Auth)
}
 ::std::string* RegisterRequestWithAuth::mutable_auth() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.RegisterRequestWithAuth.Auth)
  return auth_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterRequestWithAuth::release_auth() {
  // @@protoc_insertion_point(field_release:goprotobuf.RegisterRequestWithAuth.Auth)
  
  return auth_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterRequestWithAuth::set_allocated_auth(::std::string* auth) {
  if (auth != NULL) {
    
  } else {
    
  }
  auth_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.RegisterRequestWithAuth.Auth)
}

// optional int32 PingSpan = 4;
void RegisterRequestWithAuth::clear_pingspan() {
  pingspan_ = 0;
}
 ::google::protobuf::int32 RegisterRequestWithAuth::pingspan() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterRequestWithAuth.PingSpan)
  return pingspan_;
}
 void RegisterRequestWithAuth::set_pingspan(::google::protobuf::int32 value) {
  
  pingspan_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterRequestWithAuth.PingSpan)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterResponse::kCodeFieldNumber;
const int RegisterResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterResponse::RegisterResponse()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goprotobuf.RegisterResponse)
}

void RegisterResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:goprotobuf.RegisterResponse)
}

void RegisterResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:goprotobuf.RegisterResponse)
  SharedDtor();
}

void RegisterResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegisterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegisterResponse& RegisterResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mojingCMD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mojingCMD_2eproto();
#endif
  return *default_instance_;
}

RegisterResponse* RegisterResponse::default_instance_ = NULL;

RegisterResponse* RegisterResponse::New(::google::protobuf::Arena* arena) const {
  RegisterResponse* n = new RegisterResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:goprotobuf.RegisterResponse)
  code_ = 0;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goprotobuf.RegisterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Message;
        break;
      }

      // optional string Message = 2;
      case 2: {
        if (tag == 18) {
         parse_Message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.RegisterResponse.Message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goprotobuf.RegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goprotobuf.RegisterResponse)
  return false;
#undef DO_
}

void RegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goprotobuf.RegisterResponse)
  // optional int32 Code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string Message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.RegisterResponse.Message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:goprotobuf.RegisterResponse)
}

int RegisterResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:goprotobuf.RegisterResponse)
  int total_size = 0;

  // optional int32 Code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // optional string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegisterResponse*>(&from));
}

void RegisterResponse::MergeFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goprotobuf.RegisterResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goprotobuf.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {

  return true;
}

void RegisterResponse::Swap(RegisterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterResponse::InternalSwap(RegisterResponse* other) {
  std::swap(code_, other->code_);
  message_.Swap(&other->message_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RegisterResponse::GetTypeName() const {
  return "goprotobuf.RegisterResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterResponse

// optional int32 Code = 1;
void RegisterResponse::clear_code() {
  code_ = 0;
}
 ::google::protobuf::int32 RegisterResponse::code() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterResponse.Code)
  return code_;
}
 void RegisterResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterResponse.Code)
}

// optional string Message = 2;
void RegisterResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RegisterResponse::message() const {
  // @@protoc_insertion_point(field_get:goprotobuf.RegisterResponse.Message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.RegisterResponse.Message)
}
 void RegisterResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.RegisterResponse.Message)
}
 void RegisterResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.RegisterResponse.Message)
}
 ::std::string* RegisterResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.RegisterResponse.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RegisterResponse::release_message() {
  // @@protoc_insertion_point(field_release:goprotobuf.RegisterResponse.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RegisterResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.RegisterResponse.Message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadDeviceInfoRequest::kDeviceIDFieldNumber;
const int UploadDeviceInfoRequest::kFirmwareVersionFieldNumber;
const int UploadDeviceInfoRequest::kFirmwareMD5FieldNumber;
const int UploadDeviceInfoRequest::kSoftwareVersionFieldNumber;
const int UploadDeviceInfoRequest::kSoftwareMD5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadDeviceInfoRequest::UploadDeviceInfoRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goprotobuf.UploadDeviceInfoRequest)
}

void UploadDeviceInfoRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UploadDeviceInfoRequest::UploadDeviceInfoRequest(const UploadDeviceInfoRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:goprotobuf.UploadDeviceInfoRequest)
}

void UploadDeviceInfoRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmwareversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmwaremd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  softwareversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  softwaremd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UploadDeviceInfoRequest::~UploadDeviceInfoRequest() {
  // @@protoc_insertion_point(destructor:goprotobuf.UploadDeviceInfoRequest)
  SharedDtor();
}

void UploadDeviceInfoRequest::SharedDtor() {
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmwareversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmwaremd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  softwareversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  softwaremd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UploadDeviceInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UploadDeviceInfoRequest& UploadDeviceInfoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mojingCMD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mojingCMD_2eproto();
#endif
  return *default_instance_;
}

UploadDeviceInfoRequest* UploadDeviceInfoRequest::default_instance_ = NULL;

UploadDeviceInfoRequest* UploadDeviceInfoRequest::New(::google::protobuf::Arena* arena) const {
  UploadDeviceInfoRequest* n = new UploadDeviceInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadDeviceInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:goprotobuf.UploadDeviceInfoRequest)
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmwaremd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  softwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  softwaremd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UploadDeviceInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goprotobuf.UploadDeviceInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DeviceID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.UploadDeviceInfoRequest.DeviceID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FirmwareVersion;
        break;
      }

      // optional string FirmwareVersion = 2;
      case 2: {
        if (tag == 18) {
         parse_FirmwareVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmwareversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmwareversion().data(), this->firmwareversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.UploadDeviceInfoRequest.FirmwareVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FirmwareMD5;
        break;
      }

      // optional string FirmwareMD5 = 3;
      case 3: {
        if (tag == 26) {
         parse_FirmwareMD5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmwaremd5()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmwaremd5().data(), this->firmwaremd5().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.UploadDeviceInfoRequest.FirmwareMD5"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SoftwareVersion;
        break;
      }

      // optional string SoftwareVersion = 4;
      case 4: {
        if (tag == 34) {
         parse_SoftwareVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_softwareversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->softwareversion().data(), this->softwareversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.UploadDeviceInfoRequest.SoftwareVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SoftwareMD5;
        break;
      }

      // optional string SoftwareMD5 = 5;
      case 5: {
        if (tag == 42) {
         parse_SoftwareMD5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_softwaremd5()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->softwaremd5().data(), this->softwaremd5().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.UploadDeviceInfoRequest.SoftwareMD5"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goprotobuf.UploadDeviceInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goprotobuf.UploadDeviceInfoRequest)
  return false;
#undef DO_
}

void UploadDeviceInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goprotobuf.UploadDeviceInfoRequest)
  // optional string DeviceID = 1;
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.UploadDeviceInfoRequest.DeviceID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deviceid(), output);
  }

  // optional string FirmwareVersion = 2;
  if (this->firmwareversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmwareversion().data(), this->firmwareversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.UploadDeviceInfoRequest.FirmwareVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->firmwareversion(), output);
  }

  // optional string FirmwareMD5 = 3;
  if (this->firmwaremd5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmwaremd5().data(), this->firmwaremd5().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.UploadDeviceInfoRequest.FirmwareMD5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->firmwaremd5(), output);
  }

  // optional string SoftwareVersion = 4;
  if (this->softwareversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->softwareversion().data(), this->softwareversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.UploadDeviceInfoRequest.SoftwareVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->softwareversion(), output);
  }

  // optional string SoftwareMD5 = 5;
  if (this->softwaremd5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->softwaremd5().data(), this->softwaremd5().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.UploadDeviceInfoRequest.SoftwareMD5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->softwaremd5(), output);
  }

  // @@protoc_insertion_point(serialize_end:goprotobuf.UploadDeviceInfoRequest)
}

int UploadDeviceInfoRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:goprotobuf.UploadDeviceInfoRequest)
  int total_size = 0;

  // optional string DeviceID = 1;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceid());
  }

  // optional string FirmwareVersion = 2;
  if (this->firmwareversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmwareversion());
  }

  // optional string FirmwareMD5 = 3;
  if (this->firmwaremd5().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmwaremd5());
  }

  // optional string SoftwareVersion = 4;
  if (this->softwareversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->softwareversion());
  }

  // optional string SoftwareMD5 = 5;
  if (this->softwaremd5().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->softwaremd5());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadDeviceInfoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UploadDeviceInfoRequest*>(&from));
}

void UploadDeviceInfoRequest::MergeFrom(const UploadDeviceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goprotobuf.UploadDeviceInfoRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.firmwareversion().size() > 0) {

    firmwareversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmwareversion_);
  }
  if (from.firmwaremd5().size() > 0) {

    firmwaremd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmwaremd5_);
  }
  if (from.softwareversion().size() > 0) {

    softwareversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.softwareversion_);
  }
  if (from.softwaremd5().size() > 0) {

    softwaremd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.softwaremd5_);
  }
}

void UploadDeviceInfoRequest::CopyFrom(const UploadDeviceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goprotobuf.UploadDeviceInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadDeviceInfoRequest::IsInitialized() const {

  return true;
}

void UploadDeviceInfoRequest::Swap(UploadDeviceInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadDeviceInfoRequest::InternalSwap(UploadDeviceInfoRequest* other) {
  deviceid_.Swap(&other->deviceid_);
  firmwareversion_.Swap(&other->firmwareversion_);
  firmwaremd5_.Swap(&other->firmwaremd5_);
  softwareversion_.Swap(&other->softwareversion_);
  softwaremd5_.Swap(&other->softwaremd5_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UploadDeviceInfoRequest::GetTypeName() const {
  return "goprotobuf.UploadDeviceInfoRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadDeviceInfoRequest

// optional string DeviceID = 1;
void UploadDeviceInfoRequest::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UploadDeviceInfoRequest::deviceid() const {
  // @@protoc_insertion_point(field_get:goprotobuf.UploadDeviceInfoRequest.DeviceID)
  return deviceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadDeviceInfoRequest::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.UploadDeviceInfoRequest.DeviceID)
}
 void UploadDeviceInfoRequest::set_deviceid(const char* value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.UploadDeviceInfoRequest.DeviceID)
}
 void UploadDeviceInfoRequest::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.UploadDeviceInfoRequest.DeviceID)
}
 ::std::string* UploadDeviceInfoRequest::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.UploadDeviceInfoRequest.DeviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UploadDeviceInfoRequest::release_deviceid() {
  // @@protoc_insertion_point(field_release:goprotobuf.UploadDeviceInfoRequest.DeviceID)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadDeviceInfoRequest::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.UploadDeviceInfoRequest.DeviceID)
}

// optional string FirmwareVersion = 2;
void UploadDeviceInfoRequest::clear_firmwareversion() {
  firmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UploadDeviceInfoRequest::firmwareversion() const {
  // @@protoc_insertion_point(field_get:goprotobuf.UploadDeviceInfoRequest.FirmwareVersion)
  return firmwareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadDeviceInfoRequest::set_firmwareversion(const ::std::string& value) {
  
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.UploadDeviceInfoRequest.FirmwareVersion)
}
 void UploadDeviceInfoRequest::set_firmwareversion(const char* value) {
  
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.UploadDeviceInfoRequest.FirmwareVersion)
}
 void UploadDeviceInfoRequest::set_firmwareversion(const char* value, size_t size) {
  
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.UploadDeviceInfoRequest.FirmwareVersion)
}
 ::std::string* UploadDeviceInfoRequest::mutable_firmwareversion() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.UploadDeviceInfoRequest.FirmwareVersion)
  return firmwareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UploadDeviceInfoRequest::release_firmwareversion() {
  // @@protoc_insertion_point(field_release:goprotobuf.UploadDeviceInfoRequest.FirmwareVersion)
  
  return firmwareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadDeviceInfoRequest::set_allocated_firmwareversion(::std::string* firmwareversion) {
  if (firmwareversion != NULL) {
    
  } else {
    
  }
  firmwareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmwareversion);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.UploadDeviceInfoRequest.FirmwareVersion)
}

// optional string FirmwareMD5 = 3;
void UploadDeviceInfoRequest::clear_firmwaremd5() {
  firmwaremd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UploadDeviceInfoRequest::firmwaremd5() const {
  // @@protoc_insertion_point(field_get:goprotobuf.UploadDeviceInfoRequest.FirmwareMD5)
  return firmwaremd5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadDeviceInfoRequest::set_firmwaremd5(const ::std::string& value) {
  
  firmwaremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.UploadDeviceInfoRequest.FirmwareMD5)
}
 void UploadDeviceInfoRequest::set_firmwaremd5(const char* value) {
  
  firmwaremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.UploadDeviceInfoRequest.FirmwareMD5)
}
 void UploadDeviceInfoRequest::set_firmwaremd5(const char* value, size_t size) {
  
  firmwaremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.UploadDeviceInfoRequest.FirmwareMD5)
}
 ::std::string* UploadDeviceInfoRequest::mutable_firmwaremd5() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.UploadDeviceInfoRequest.FirmwareMD5)
  return firmwaremd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UploadDeviceInfoRequest::release_firmwaremd5() {
  // @@protoc_insertion_point(field_release:goprotobuf.UploadDeviceInfoRequest.FirmwareMD5)
  
  return firmwaremd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadDeviceInfoRequest::set_allocated_firmwaremd5(::std::string* firmwaremd5) {
  if (firmwaremd5 != NULL) {
    
  } else {
    
  }
  firmwaremd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmwaremd5);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.UploadDeviceInfoRequest.FirmwareMD5)
}

// optional string SoftwareVersion = 4;
void UploadDeviceInfoRequest::clear_softwareversion() {
  softwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UploadDeviceInfoRequest::softwareversion() const {
  // @@protoc_insertion_point(field_get:goprotobuf.UploadDeviceInfoRequest.SoftwareVersion)
  return softwareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadDeviceInfoRequest::set_softwareversion(const ::std::string& value) {
  
  softwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.UploadDeviceInfoRequest.SoftwareVersion)
}
 void UploadDeviceInfoRequest::set_softwareversion(const char* value) {
  
  softwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.UploadDeviceInfoRequest.SoftwareVersion)
}
 void UploadDeviceInfoRequest::set_softwareversion(const char* value, size_t size) {
  
  softwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.UploadDeviceInfoRequest.SoftwareVersion)
}
 ::std::string* UploadDeviceInfoRequest::mutable_softwareversion() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.UploadDeviceInfoRequest.SoftwareVersion)
  return softwareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UploadDeviceInfoRequest::release_softwareversion() {
  // @@protoc_insertion_point(field_release:goprotobuf.UploadDeviceInfoRequest.SoftwareVersion)
  
  return softwareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadDeviceInfoRequest::set_allocated_softwareversion(::std::string* softwareversion) {
  if (softwareversion != NULL) {
    
  } else {
    
  }
  softwareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), softwareversion);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.UploadDeviceInfoRequest.SoftwareVersion)
}

// optional string SoftwareMD5 = 5;
void UploadDeviceInfoRequest::clear_softwaremd5() {
  softwaremd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UploadDeviceInfoRequest::softwaremd5() const {
  // @@protoc_insertion_point(field_get:goprotobuf.UploadDeviceInfoRequest.SoftwareMD5)
  return softwaremd5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadDeviceInfoRequest::set_softwaremd5(const ::std::string& value) {
  
  softwaremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.UploadDeviceInfoRequest.SoftwareMD5)
}
 void UploadDeviceInfoRequest::set_softwaremd5(const char* value) {
  
  softwaremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.UploadDeviceInfoRequest.SoftwareMD5)
}
 void UploadDeviceInfoRequest::set_softwaremd5(const char* value, size_t size) {
  
  softwaremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.UploadDeviceInfoRequest.SoftwareMD5)
}
 ::std::string* UploadDeviceInfoRequest::mutable_softwaremd5() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.UploadDeviceInfoRequest.SoftwareMD5)
  return softwaremd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UploadDeviceInfoRequest::release_softwaremd5() {
  // @@protoc_insertion_point(field_release:goprotobuf.UploadDeviceInfoRequest.SoftwareMD5)
  
  return softwaremd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadDeviceInfoRequest::set_allocated_softwaremd5(::std::string* softwaremd5) {
  if (softwaremd5 != NULL) {
    
  } else {
    
  }
  softwaremd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), softwaremd5);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.UploadDeviceInfoRequest.SoftwareMD5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadDeviceInfoResponse::kCodeFieldNumber;
const int UploadDeviceInfoResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadDeviceInfoResponse::UploadDeviceInfoResponse()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goprotobuf.UploadDeviceInfoResponse)
}

void UploadDeviceInfoResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UploadDeviceInfoResponse::UploadDeviceInfoResponse(const UploadDeviceInfoResponse& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:goprotobuf.UploadDeviceInfoResponse)
}

void UploadDeviceInfoResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UploadDeviceInfoResponse::~UploadDeviceInfoResponse() {
  // @@protoc_insertion_point(destructor:goprotobuf.UploadDeviceInfoResponse)
  SharedDtor();
}

void UploadDeviceInfoResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UploadDeviceInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UploadDeviceInfoResponse& UploadDeviceInfoResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mojingCMD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mojingCMD_2eproto();
#endif
  return *default_instance_;
}

UploadDeviceInfoResponse* UploadDeviceInfoResponse::default_instance_ = NULL;

UploadDeviceInfoResponse* UploadDeviceInfoResponse::New(::google::protobuf::Arena* arena) const {
  UploadDeviceInfoResponse* n = new UploadDeviceInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadDeviceInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:goprotobuf.UploadDeviceInfoResponse)
  code_ = 0;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UploadDeviceInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goprotobuf.UploadDeviceInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Message;
        break;
      }

      // optional string Message = 2;
      case 2: {
        if (tag == 18) {
         parse_Message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.UploadDeviceInfoResponse.Message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goprotobuf.UploadDeviceInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goprotobuf.UploadDeviceInfoResponse)
  return false;
#undef DO_
}

void UploadDeviceInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goprotobuf.UploadDeviceInfoResponse)
  // optional int32 Code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string Message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.UploadDeviceInfoResponse.Message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:goprotobuf.UploadDeviceInfoResponse)
}

int UploadDeviceInfoResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:goprotobuf.UploadDeviceInfoResponse)
  int total_size = 0;

  // optional int32 Code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // optional string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadDeviceInfoResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UploadDeviceInfoResponse*>(&from));
}

void UploadDeviceInfoResponse::MergeFrom(const UploadDeviceInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goprotobuf.UploadDeviceInfoResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void UploadDeviceInfoResponse::CopyFrom(const UploadDeviceInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goprotobuf.UploadDeviceInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadDeviceInfoResponse::IsInitialized() const {

  return true;
}

void UploadDeviceInfoResponse::Swap(UploadDeviceInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadDeviceInfoResponse::InternalSwap(UploadDeviceInfoResponse* other) {
  std::swap(code_, other->code_);
  message_.Swap(&other->message_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UploadDeviceInfoResponse::GetTypeName() const {
  return "goprotobuf.UploadDeviceInfoResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadDeviceInfoResponse

// optional int32 Code = 1;
void UploadDeviceInfoResponse::clear_code() {
  code_ = 0;
}
 ::google::protobuf::int32 UploadDeviceInfoResponse::code() const {
  // @@protoc_insertion_point(field_get:goprotobuf.UploadDeviceInfoResponse.Code)
  return code_;
}
 void UploadDeviceInfoResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.UploadDeviceInfoResponse.Code)
}

// optional string Message = 2;
void UploadDeviceInfoResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UploadDeviceInfoResponse::message() const {
  // @@protoc_insertion_point(field_get:goprotobuf.UploadDeviceInfoResponse.Message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadDeviceInfoResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.UploadDeviceInfoResponse.Message)
}
 void UploadDeviceInfoResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.UploadDeviceInfoResponse.Message)
}
 void UploadDeviceInfoResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.UploadDeviceInfoResponse.Message)
}
 ::std::string* UploadDeviceInfoResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.UploadDeviceInfoResponse.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UploadDeviceInfoResponse::release_message() {
  // @@protoc_insertion_point(field_release:goprotobuf.UploadDeviceInfoResponse.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UploadDeviceInfoResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.UploadDeviceInfoResponse.Message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ping::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ping::Ping()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goprotobuf.Ping)
}

void Ping::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Ping::Ping(const Ping& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:goprotobuf.Ping)
}

void Ping::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:goprotobuf.Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Ping& Ping::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mojingCMD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mojingCMD_2eproto();
#endif
  return *default_instance_;
}

Ping* Ping::default_instance_ = NULL;

Ping* Ping::New(::google::protobuf::Arena* arena) const {
  Ping* n = new Ping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:goprotobuf.Ping)
  time_ = GOOGLE_LONGLONG(0);
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goprotobuf.Ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goprotobuf.Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goprotobuf.Ping)
  return false;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goprotobuf.Ping)
  // optional int64 Time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // @@protoc_insertion_point(serialize_end:goprotobuf.Ping)
}

int Ping::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:goprotobuf.Ping)
  int total_size = 0;

  // optional int64 Time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Ping*>(&from));
}

void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goprotobuf.Ping)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goprotobuf.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {

  return true;
}

void Ping::Swap(Ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ping::InternalSwap(Ping* other) {
  std::swap(time_, other->time_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Ping::GetTypeName() const {
  return "goprotobuf.Ping";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ping

// optional int64 Time = 1;
void Ping::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Ping::time() const {
  // @@protoc_insertion_point(field_get:goprotobuf.Ping.Time)
  return time_;
}
 void Ping::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.Ping.Time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pong::kCodeFieldNumber;
const int Pong::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pong::Pong()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goprotobuf.Pong)
}

void Pong::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Pong::Pong(const Pong& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:goprotobuf.Pong)
}

void Pong::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Pong::~Pong() {
  // @@protoc_insertion_point(destructor:goprotobuf.Pong)
  SharedDtor();
}

void Pong::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Pong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Pong& Pong::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mojingCMD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mojingCMD_2eproto();
#endif
  return *default_instance_;
}

Pong* Pong::default_instance_ = NULL;

Pong* Pong::New(::google::protobuf::Arena* arena) const {
  Pong* n = new Pong;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pong::Clear() {
// @@protoc_insertion_point(message_clear_start:goprotobuf.Pong)
  code_ = 0;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Pong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goprotobuf.Pong)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Message;
        break;
      }

      // optional string Message = 2;
      case 2: {
        if (tag == 18) {
         parse_Message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.Pong.Message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goprotobuf.Pong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goprotobuf.Pong)
  return false;
#undef DO_
}

void Pong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goprotobuf.Pong)
  // optional int32 Code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string Message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.Pong.Message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:goprotobuf.Pong)
}

int Pong::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:goprotobuf.Pong)
  int total_size = 0;

  // optional int32 Code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // optional string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pong::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Pong*>(&from));
}

void Pong::MergeFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goprotobuf.Pong)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Pong::CopyFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goprotobuf.Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pong::IsInitialized() const {

  return true;
}

void Pong::Swap(Pong* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pong::InternalSwap(Pong* other) {
  std::swap(code_, other->code_);
  message_.Swap(&other->message_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Pong::GetTypeName() const {
  return "goprotobuf.Pong";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pong

// optional int32 Code = 1;
void Pong::clear_code() {
  code_ = 0;
}
 ::google::protobuf::int32 Pong::code() const {
  // @@protoc_insertion_point(field_get:goprotobuf.Pong.Code)
  return code_;
}
 void Pong::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.Pong.Code)
}

// optional string Message = 2;
void Pong::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Pong::message() const {
  // @@protoc_insertion_point(field_get:goprotobuf.Pong.Message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Pong::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.Pong.Message)
}
 void Pong::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.Pong.Message)
}
 void Pong::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.Pong.Message)
}
 ::std::string* Pong::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.Pong.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Pong::release_message() {
  // @@protoc_insertion_point(field_release:goprotobuf.Pong.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Pong::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.Pong.Message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceUpdateRequest::kUpdateTypeFieldNumber;
const int DeviceUpdateRequest::kWareURLFieldNumber;
const int DeviceUpdateRequest::kWareVersionFieldNumber;
const int DeviceUpdateRequest::kWareMD5FieldNumber;
const int DeviceUpdateRequest::kTaskIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceUpdateRequest::DeviceUpdateRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goprotobuf.DeviceUpdateRequest)
}

void DeviceUpdateRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeviceUpdateRequest::DeviceUpdateRequest(const DeviceUpdateRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:goprotobuf.DeviceUpdateRequest)
}

void DeviceUpdateRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  updatetype_ = 0;
  wareurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wareversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waremd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeviceUpdateRequest::~DeviceUpdateRequest() {
  // @@protoc_insertion_point(destructor:goprotobuf.DeviceUpdateRequest)
  SharedDtor();
}

void DeviceUpdateRequest::SharedDtor() {
  wareurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wareversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waremd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taskid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeviceUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceUpdateRequest& DeviceUpdateRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mojingCMD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mojingCMD_2eproto();
#endif
  return *default_instance_;
}

DeviceUpdateRequest* DeviceUpdateRequest::default_instance_ = NULL;

DeviceUpdateRequest* DeviceUpdateRequest::New(::google::protobuf::Arena* arena) const {
  DeviceUpdateRequest* n = new DeviceUpdateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:goprotobuf.DeviceUpdateRequest)
  updatetype_ = 0;
  wareurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waremd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goprotobuf.DeviceUpdateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UpdateType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatetype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wareURL;
        break;
      }

      // optional string wareURL = 2;
      case 2: {
        if (tag == 18) {
         parse_wareURL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wareurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->wareurl().data(), this->wareurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.DeviceUpdateRequest.wareURL"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wareVersion;
        break;
      }

      // optional string wareVersion = 3;
      case 3: {
        if (tag == 26) {
         parse_wareVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wareversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->wareversion().data(), this->wareversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.DeviceUpdateRequest.wareVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_wareMD5;
        break;
      }

      // optional string wareMD5 = 4;
      case 4: {
        if (tag == 34) {
         parse_wareMD5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_waremd5()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->waremd5().data(), this->waremd5().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.DeviceUpdateRequest.wareMD5"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_TaskID;
        break;
      }

      // optional string TaskID = 5;
      case 5: {
        if (tag == 42) {
         parse_TaskID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.DeviceUpdateRequest.TaskID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goprotobuf.DeviceUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goprotobuf.DeviceUpdateRequest)
  return false;
#undef DO_
}

void DeviceUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goprotobuf.DeviceUpdateRequest)
  // optional int32 UpdateType = 1;
  if (this->updatetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->updatetype(), output);
  }

  // optional string wareURL = 2;
  if (this->wareurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wareurl().data(), this->wareurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.DeviceUpdateRequest.wareURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->wareurl(), output);
  }

  // optional string wareVersion = 3;
  if (this->wareversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wareversion().data(), this->wareversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.DeviceUpdateRequest.wareVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->wareversion(), output);
  }

  // optional string wareMD5 = 4;
  if (this->waremd5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->waremd5().data(), this->waremd5().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.DeviceUpdateRequest.wareMD5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->waremd5(), output);
  }

  // optional string TaskID = 5;
  if (this->taskid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.DeviceUpdateRequest.TaskID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->taskid(), output);
  }

  // @@protoc_insertion_point(serialize_end:goprotobuf.DeviceUpdateRequest)
}

int DeviceUpdateRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:goprotobuf.DeviceUpdateRequest)
  int total_size = 0;

  // optional int32 UpdateType = 1;
  if (this->updatetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->updatetype());
  }

  // optional string wareURL = 2;
  if (this->wareurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wareurl());
  }

  // optional string wareVersion = 3;
  if (this->wareversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wareversion());
  }

  // optional string wareMD5 = 4;
  if (this->waremd5().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->waremd5());
  }

  // optional string TaskID = 5;
  if (this->taskid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->taskid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceUpdateRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceUpdateRequest*>(&from));
}

void DeviceUpdateRequest::MergeFrom(const DeviceUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goprotobuf.DeviceUpdateRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.updatetype() != 0) {
    set_updatetype(from.updatetype());
  }
  if (from.wareurl().size() > 0) {

    wareurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wareurl_);
  }
  if (from.wareversion().size() > 0) {

    wareversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wareversion_);
  }
  if (from.waremd5().size() > 0) {

    waremd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.waremd5_);
  }
  if (from.taskid().size() > 0) {

    taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
}

void DeviceUpdateRequest::CopyFrom(const DeviceUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goprotobuf.DeviceUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceUpdateRequest::IsInitialized() const {

  return true;
}

void DeviceUpdateRequest::Swap(DeviceUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceUpdateRequest::InternalSwap(DeviceUpdateRequest* other) {
  std::swap(updatetype_, other->updatetype_);
  wareurl_.Swap(&other->wareurl_);
  wareversion_.Swap(&other->wareversion_);
  waremd5_.Swap(&other->waremd5_);
  taskid_.Swap(&other->taskid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceUpdateRequest::GetTypeName() const {
  return "goprotobuf.DeviceUpdateRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceUpdateRequest

// optional int32 UpdateType = 1;
void DeviceUpdateRequest::clear_updatetype() {
  updatetype_ = 0;
}
 ::google::protobuf::int32 DeviceUpdateRequest::updatetype() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateRequest.UpdateType)
  return updatetype_;
}
 void DeviceUpdateRequest::set_updatetype(::google::protobuf::int32 value) {
  
  updatetype_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateRequest.UpdateType)
}

// optional string wareURL = 2;
void DeviceUpdateRequest::clear_wareurl() {
  wareurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceUpdateRequest::wareurl() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateRequest.wareURL)
  return wareurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceUpdateRequest::set_wareurl(const ::std::string& value) {
  
  wareurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateRequest.wareURL)
}
 void DeviceUpdateRequest::set_wareurl(const char* value) {
  
  wareurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.DeviceUpdateRequest.wareURL)
}
 void DeviceUpdateRequest::set_wareurl(const char* value, size_t size) {
  
  wareurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.DeviceUpdateRequest.wareURL)
}
 ::std::string* DeviceUpdateRequest::mutable_wareurl() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.DeviceUpdateRequest.wareURL)
  return wareurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceUpdateRequest::release_wareurl() {
  // @@protoc_insertion_point(field_release:goprotobuf.DeviceUpdateRequest.wareURL)
  
  return wareurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceUpdateRequest::set_allocated_wareurl(::std::string* wareurl) {
  if (wareurl != NULL) {
    
  } else {
    
  }
  wareurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wareurl);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.DeviceUpdateRequest.wareURL)
}

// optional string wareVersion = 3;
void DeviceUpdateRequest::clear_wareversion() {
  wareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceUpdateRequest::wareversion() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateRequest.wareVersion)
  return wareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceUpdateRequest::set_wareversion(const ::std::string& value) {
  
  wareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateRequest.wareVersion)
}
 void DeviceUpdateRequest::set_wareversion(const char* value) {
  
  wareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.DeviceUpdateRequest.wareVersion)
}
 void DeviceUpdateRequest::set_wareversion(const char* value, size_t size) {
  
  wareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.DeviceUpdateRequest.wareVersion)
}
 ::std::string* DeviceUpdateRequest::mutable_wareversion() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.DeviceUpdateRequest.wareVersion)
  return wareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceUpdateRequest::release_wareversion() {
  // @@protoc_insertion_point(field_release:goprotobuf.DeviceUpdateRequest.wareVersion)
  
  return wareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceUpdateRequest::set_allocated_wareversion(::std::string* wareversion) {
  if (wareversion != NULL) {
    
  } else {
    
  }
  wareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wareversion);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.DeviceUpdateRequest.wareVersion)
}

// optional string wareMD5 = 4;
void DeviceUpdateRequest::clear_waremd5() {
  waremd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceUpdateRequest::waremd5() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateRequest.wareMD5)
  return waremd5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceUpdateRequest::set_waremd5(const ::std::string& value) {
  
  waremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateRequest.wareMD5)
}
 void DeviceUpdateRequest::set_waremd5(const char* value) {
  
  waremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.DeviceUpdateRequest.wareMD5)
}
 void DeviceUpdateRequest::set_waremd5(const char* value, size_t size) {
  
  waremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.DeviceUpdateRequest.wareMD5)
}
 ::std::string* DeviceUpdateRequest::mutable_waremd5() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.DeviceUpdateRequest.wareMD5)
  return waremd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceUpdateRequest::release_waremd5() {
  // @@protoc_insertion_point(field_release:goprotobuf.DeviceUpdateRequest.wareMD5)
  
  return waremd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceUpdateRequest::set_allocated_waremd5(::std::string* waremd5) {
  if (waremd5 != NULL) {
    
  } else {
    
  }
  waremd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), waremd5);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.DeviceUpdateRequest.wareMD5)
}

// optional string TaskID = 5;
void DeviceUpdateRequest::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceUpdateRequest::taskid() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateRequest.TaskID)
  return taskid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceUpdateRequest::set_taskid(const ::std::string& value) {
  
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateRequest.TaskID)
}
 void DeviceUpdateRequest::set_taskid(const char* value) {
  
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.DeviceUpdateRequest.TaskID)
}
 void DeviceUpdateRequest::set_taskid(const char* value, size_t size) {
  
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.DeviceUpdateRequest.TaskID)
}
 ::std::string* DeviceUpdateRequest::mutable_taskid() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.DeviceUpdateRequest.TaskID)
  return taskid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceUpdateRequest::release_taskid() {
  // @@protoc_insertion_point(field_release:goprotobuf.DeviceUpdateRequest.TaskID)
  
  return taskid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceUpdateRequest::set_allocated_taskid(::std::string* taskid) {
  if (taskid != NULL) {
    
  } else {
    
  }
  taskid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.DeviceUpdateRequest.TaskID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceUpdateResponse::kCodeFieldNumber;
const int DeviceUpdateResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceUpdateResponse::DeviceUpdateResponse()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goprotobuf.DeviceUpdateResponse)
}

void DeviceUpdateResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeviceUpdateResponse::DeviceUpdateResponse(const DeviceUpdateResponse& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:goprotobuf.DeviceUpdateResponse)
}

void DeviceUpdateResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeviceUpdateResponse::~DeviceUpdateResponse() {
  // @@protoc_insertion_point(destructor:goprotobuf.DeviceUpdateResponse)
  SharedDtor();
}

void DeviceUpdateResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeviceUpdateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceUpdateResponse& DeviceUpdateResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mojingCMD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mojingCMD_2eproto();
#endif
  return *default_instance_;
}

DeviceUpdateResponse* DeviceUpdateResponse::default_instance_ = NULL;

DeviceUpdateResponse* DeviceUpdateResponse::New(::google::protobuf::Arena* arena) const {
  DeviceUpdateResponse* n = new DeviceUpdateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:goprotobuf.DeviceUpdateResponse)
  code_ = 0;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goprotobuf.DeviceUpdateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Message;
        break;
      }

      // optional string Message = 2;
      case 2: {
        if (tag == 18) {
         parse_Message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.DeviceUpdateResponse.Message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goprotobuf.DeviceUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goprotobuf.DeviceUpdateResponse)
  return false;
#undef DO_
}

void DeviceUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goprotobuf.DeviceUpdateResponse)
  // optional int32 Code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string Message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.DeviceUpdateResponse.Message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:goprotobuf.DeviceUpdateResponse)
}

int DeviceUpdateResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:goprotobuf.DeviceUpdateResponse)
  int total_size = 0;

  // optional int32 Code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // optional string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceUpdateResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceUpdateResponse*>(&from));
}

void DeviceUpdateResponse::MergeFrom(const DeviceUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goprotobuf.DeviceUpdateResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void DeviceUpdateResponse::CopyFrom(const DeviceUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goprotobuf.DeviceUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceUpdateResponse::IsInitialized() const {

  return true;
}

void DeviceUpdateResponse::Swap(DeviceUpdateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceUpdateResponse::InternalSwap(DeviceUpdateResponse* other) {
  std::swap(code_, other->code_);
  message_.Swap(&other->message_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceUpdateResponse::GetTypeName() const {
  return "goprotobuf.DeviceUpdateResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceUpdateResponse

// optional int32 Code = 1;
void DeviceUpdateResponse::clear_code() {
  code_ = 0;
}
 ::google::protobuf::int32 DeviceUpdateResponse::code() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateResponse.Code)
  return code_;
}
 void DeviceUpdateResponse::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateResponse.Code)
}

// optional string Message = 2;
void DeviceUpdateResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceUpdateResponse::message() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateResponse.Message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceUpdateResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateResponse.Message)
}
 void DeviceUpdateResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.DeviceUpdateResponse.Message)
}
 void DeviceUpdateResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.DeviceUpdateResponse.Message)
}
 ::std::string* DeviceUpdateResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.DeviceUpdateResponse.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceUpdateResponse::release_message() {
  // @@protoc_insertion_point(field_release:goprotobuf.DeviceUpdateResponse.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceUpdateResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.DeviceUpdateResponse.Message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceUpdateNotify::kUpdateTypeFieldNumber;
const int DeviceUpdateNotify::kTastIDFieldNumber;
const int DeviceUpdateNotify::kWareVersionFieldNumber;
const int DeviceUpdateNotify::kWareMD5FieldNumber;
const int DeviceUpdateNotify::kUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceUpdateNotify::DeviceUpdateNotify()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:goprotobuf.DeviceUpdateNotify)
}

void DeviceUpdateNotify::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeviceUpdateNotify::DeviceUpdateNotify(const DeviceUpdateNotify& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:goprotobuf.DeviceUpdateNotify)
}

void DeviceUpdateNotify::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  updatetype_ = 0;
  tastid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wareversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waremd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updatetime_ = GOOGLE_LONGLONG(0);
}

DeviceUpdateNotify::~DeviceUpdateNotify() {
  // @@protoc_insertion_point(destructor:goprotobuf.DeviceUpdateNotify)
  SharedDtor();
}

void DeviceUpdateNotify::SharedDtor() {
  tastid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wareversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waremd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeviceUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceUpdateNotify& DeviceUpdateNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_mojingCMD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_mojingCMD_2eproto();
#endif
  return *default_instance_;
}

DeviceUpdateNotify* DeviceUpdateNotify::default_instance_ = NULL;

DeviceUpdateNotify* DeviceUpdateNotify::New(::google::protobuf::Arena* arena) const {
  DeviceUpdateNotify* n = new DeviceUpdateNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceUpdateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:goprotobuf.DeviceUpdateNotify)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DeviceUpdateNotify, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DeviceUpdateNotify*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(updatetime_, updatetype_);
  tastid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waremd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool DeviceUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:goprotobuf.DeviceUpdateNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UpdateType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatetype_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TastID;
        break;
      }

      // optional string TastID = 2;
      case 2: {
        if (tag == 18) {
         parse_TastID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tastid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tastid().data(), this->tastid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.DeviceUpdateNotify.TastID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wareVersion;
        break;
      }

      // optional string wareVersion = 3;
      case 3: {
        if (tag == 26) {
         parse_wareVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wareversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->wareversion().data(), this->wareversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.DeviceUpdateNotify.wareVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_wareMD5;
        break;
      }

      // optional string wareMD5 = 4;
      case 4: {
        if (tag == 34) {
         parse_wareMD5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_waremd5()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->waremd5().data(), this->waremd5().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "goprotobuf.DeviceUpdateNotify.wareMD5"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_UpdateTime;
        break;
      }

      // optional int64 UpdateTime = 5;
      case 5: {
        if (tag == 40) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:goprotobuf.DeviceUpdateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:goprotobuf.DeviceUpdateNotify)
  return false;
#undef DO_
}

void DeviceUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:goprotobuf.DeviceUpdateNotify)
  // optional int32 UpdateType = 1;
  if (this->updatetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->updatetype(), output);
  }

  // optional string TastID = 2;
  if (this->tastid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tastid().data(), this->tastid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.DeviceUpdateNotify.TastID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tastid(), output);
  }

  // optional string wareVersion = 3;
  if (this->wareversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wareversion().data(), this->wareversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.DeviceUpdateNotify.wareVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->wareversion(), output);
  }

  // optional string wareMD5 = 4;
  if (this->waremd5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->waremd5().data(), this->waremd5().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "goprotobuf.DeviceUpdateNotify.wareMD5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->waremd5(), output);
  }

  // optional int64 UpdateTime = 5;
  if (this->updatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->updatetime(), output);
  }

  // @@protoc_insertion_point(serialize_end:goprotobuf.DeviceUpdateNotify)
}

int DeviceUpdateNotify::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:goprotobuf.DeviceUpdateNotify)
  int total_size = 0;

  // optional int32 UpdateType = 1;
  if (this->updatetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->updatetype());
  }

  // optional string TastID = 2;
  if (this->tastid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tastid());
  }

  // optional string wareVersion = 3;
  if (this->wareversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wareversion());
  }

  // optional string wareMD5 = 4;
  if (this->waremd5().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->waremd5());
  }

  // optional int64 UpdateTime = 5;
  if (this->updatetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->updatetime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceUpdateNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceUpdateNotify*>(&from));
}

void DeviceUpdateNotify::MergeFrom(const DeviceUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:goprotobuf.DeviceUpdateNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.updatetype() != 0) {
    set_updatetype(from.updatetype());
  }
  if (from.tastid().size() > 0) {

    tastid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tastid_);
  }
  if (from.wareversion().size() > 0) {

    wareversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wareversion_);
  }
  if (from.waremd5().size() > 0) {

    waremd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.waremd5_);
  }
  if (from.updatetime() != 0) {
    set_updatetime(from.updatetime());
  }
}

void DeviceUpdateNotify::CopyFrom(const DeviceUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:goprotobuf.DeviceUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceUpdateNotify::IsInitialized() const {

  return true;
}

void DeviceUpdateNotify::Swap(DeviceUpdateNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceUpdateNotify::InternalSwap(DeviceUpdateNotify* other) {
  std::swap(updatetype_, other->updatetype_);
  tastid_.Swap(&other->tastid_);
  wareversion_.Swap(&other->wareversion_);
  waremd5_.Swap(&other->waremd5_);
  std::swap(updatetime_, other->updatetime_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceUpdateNotify::GetTypeName() const {
  return "goprotobuf.DeviceUpdateNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceUpdateNotify

// optional int32 UpdateType = 1;
void DeviceUpdateNotify::clear_updatetype() {
  updatetype_ = 0;
}
 ::google::protobuf::int32 DeviceUpdateNotify::updatetype() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateNotify.UpdateType)
  return updatetype_;
}
 void DeviceUpdateNotify::set_updatetype(::google::protobuf::int32 value) {
  
  updatetype_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateNotify.UpdateType)
}

// optional string TastID = 2;
void DeviceUpdateNotify::clear_tastid() {
  tastid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceUpdateNotify::tastid() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateNotify.TastID)
  return tastid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceUpdateNotify::set_tastid(const ::std::string& value) {
  
  tastid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateNotify.TastID)
}
 void DeviceUpdateNotify::set_tastid(const char* value) {
  
  tastid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.DeviceUpdateNotify.TastID)
}
 void DeviceUpdateNotify::set_tastid(const char* value, size_t size) {
  
  tastid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.DeviceUpdateNotify.TastID)
}
 ::std::string* DeviceUpdateNotify::mutable_tastid() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.DeviceUpdateNotify.TastID)
  return tastid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceUpdateNotify::release_tastid() {
  // @@protoc_insertion_point(field_release:goprotobuf.DeviceUpdateNotify.TastID)
  
  return tastid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceUpdateNotify::set_allocated_tastid(::std::string* tastid) {
  if (tastid != NULL) {
    
  } else {
    
  }
  tastid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tastid);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.DeviceUpdateNotify.TastID)
}

// optional string wareVersion = 3;
void DeviceUpdateNotify::clear_wareversion() {
  wareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceUpdateNotify::wareversion() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateNotify.wareVersion)
  return wareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceUpdateNotify::set_wareversion(const ::std::string& value) {
  
  wareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateNotify.wareVersion)
}
 void DeviceUpdateNotify::set_wareversion(const char* value) {
  
  wareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.DeviceUpdateNotify.wareVersion)
}
 void DeviceUpdateNotify::set_wareversion(const char* value, size_t size) {
  
  wareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.DeviceUpdateNotify.wareVersion)
}
 ::std::string* DeviceUpdateNotify::mutable_wareversion() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.DeviceUpdateNotify.wareVersion)
  return wareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceUpdateNotify::release_wareversion() {
  // @@protoc_insertion_point(field_release:goprotobuf.DeviceUpdateNotify.wareVersion)
  
  return wareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceUpdateNotify::set_allocated_wareversion(::std::string* wareversion) {
  if (wareversion != NULL) {
    
  } else {
    
  }
  wareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wareversion);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.DeviceUpdateNotify.wareVersion)
}

// optional string wareMD5 = 4;
void DeviceUpdateNotify::clear_waremd5() {
  waremd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DeviceUpdateNotify::waremd5() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateNotify.wareMD5)
  return waremd5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceUpdateNotify::set_waremd5(const ::std::string& value) {
  
  waremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateNotify.wareMD5)
}
 void DeviceUpdateNotify::set_waremd5(const char* value) {
  
  waremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goprotobuf.DeviceUpdateNotify.wareMD5)
}
 void DeviceUpdateNotify::set_waremd5(const char* value, size_t size) {
  
  waremd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goprotobuf.DeviceUpdateNotify.wareMD5)
}
 ::std::string* DeviceUpdateNotify::mutable_waremd5() {
  
  // @@protoc_insertion_point(field_mutable:goprotobuf.DeviceUpdateNotify.wareMD5)
  return waremd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceUpdateNotify::release_waremd5() {
  // @@protoc_insertion_point(field_release:goprotobuf.DeviceUpdateNotify.wareMD5)
  
  return waremd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceUpdateNotify::set_allocated_waremd5(::std::string* waremd5) {
  if (waremd5 != NULL) {
    
  } else {
    
  }
  waremd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), waremd5);
  // @@protoc_insertion_point(field_set_allocated:goprotobuf.DeviceUpdateNotify.wareMD5)
}

// optional int64 UpdateTime = 5;
void DeviceUpdateNotify::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 DeviceUpdateNotify::updatetime() const {
  // @@protoc_insertion_point(field_get:goprotobuf.DeviceUpdateNotify.UpdateTime)
  return updatetime_;
}
 void DeviceUpdateNotify::set_updatetime(::google::protobuf::int64 value) {
  
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:goprotobuf.DeviceUpdateNotify.UpdateTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace goprotobuf

// @@protoc_insertion_point(global_scope)
