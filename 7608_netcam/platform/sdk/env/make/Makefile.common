################################################################################
################################################################################
##
## Makefile -- tool chain independend settings
##
## (C) Copyright 2012-2013 by Guoke Microelectronics Co.,Ltd
##
## This include makefile defines internal make variables to support
## various tool chains.
##
## required variables:
##
##  - TOPDIR          the toplevel directory
##  - SOURCES         the list of source files to compile, etc.
##  - TARGET         the machine qualifier to generate code for
##
## required variables:
##
##  - OBJECT_EXT      extension for object files
##  - LIBRARY_EXT     extension for library files
##  - PROGRAM_EXT     extension for executable files
##  - TARGET_SUBDIR  sub directory where to store machine depending objects
##  - HEADER_SUBDIR   extension for object files ie. ".o" or ".obj"
##
################################################################################
################################################################################

TOPDIR      ?= .
LIBRARY     ?= undefined
HEADERS     ?=
PROGRAM     ?= undefined
SUBDIRS     ?= undefined
TARGET      ?= arm11-gnuarm
HOST        ?= win32
REPORT      ?= 0
MISRA       ?= 0
FREG_INLINE ?= 0
SUBMAKE     ?= $(MAKE) --no-print-directory TARGET:=$(TARGET) REPORT=$(REPORT) MISRA=$(MISRA) DEPEND=$(DEPEND) DECODER=$(DECODER)
export TOPDIR
export SDK_TOP

  VARIABLES += TOPDIR
  VARIABLES += TARGET
  VARIABLES += SOURCES
  VARIABLES += LIBRARY
  VARIABLES += HEADERS
  VARIABLES += PROGRAM
  VARIABLES += DIRECTORIES
  VARIABLES += REPORT
  VARIABLES += MISRA
  VARIABLES += SUBMAKE
  VARIABLES += FREG_INLINE

DOLLAR@ = $(subst \,/,$@)
DOLLAR< = $(subst \,/,$<)
DOLLAR* = $(subst \,/,$*)
DOLLAR^ = $(subst \,/,$^)

ifndef REPORT
  ATSIGN = @
else
  ifeq ($(REPORT),0)
    ATSIGN = @
  endif
endif

################################################################################
#
# common file extension settings
#
################################################################################

DEBUG_EXT    = _d
PROFILE_EXT  = -p
STRIP_EXT    = -s
ELFDUMP_EXT  = .elfdump
IMAGE_EXT    = .bin
MRS_EXT      = .img
S3HEX_EXT    = .s3hex
INTELHEX_EXT = .hex
MQSIM_EXT    = .mqsim
PATVHD_EXT   = .pat_vhd
PATVE_EXT    = .pat_ve
SPANSION_EXT = .spansion
SYMBOL_EXT   = .sym
GZIP_EXT     = .gz
ZIP_EXT      = .zip
TXT_EXT      = .txt
BZ2_EXT      = .tar.bz2
BEAUTIFY_EXT = .beautify
ifeq ("$(MEMORY_BYTES_SYSTEM)","0x00000000")
    FIRMWARE_EXT = $(S3HEX_EXT).ramifv
else
    FIRMWARE_EXT = $(S3HEX_EXT)
endif

  VARIABLES += DEBUG_EXT
  VARIABLES += PROFILE_EXT
  VARIABLES += STRIP_EXT
  VARIABLES += ELFDUMP_EXT
  VARIABLES += IMAGE_EXT
  VARIABLES += S3HEX_EXT
  VARIABLES += INTELHEX_EXT
  VARIABLES += MQSIM_EXT
  VARIABLES += PATVHD_EXT
  VARIABLES += PATVE_EXT
  VARIABLES += SPANSION_EXT
  VARIABLES += SYMBOL_EXT
  VARIABLES += GZIP_EXT
  VARIABLES += ZIP_EXT
  VARIABLES += TXT_EXT
  VARIABLES += BEAUTIFY_EXT
  VARIABLES += FIRMWARE_EXT

OBJECT_DEBUG_EXT          = $(DEBUG_EXT)$(OBJECT_EXT)
OBJECT_PROFILE_EXT        = $(PROFILE_EXT)$(OBJECT_EXT)
DLL_DEBUG_EXT             = $(DEBUG_EXT)$(DLL_EXT)
DLL_PROFILE_EXT           = $(PROFILE_EXT)$(DLL_EXT)
LIBRARY_DEBUG_EXT         = $(DEBUG_EXT)$(LIBRARY_EXT)
LIBRARY_PROFILE_EXT       = $(PROFILE_EXT)$(LIBRARY_EXT)
LIBRARY_ELFDUMP_EXT       = $(LIBRARY_EXT)$(ELFDUMP_EXT)
LIBRARY_DEBUG_ELFDUMP_EXT = $(DEBUG_EXT)$(LIBRARY_EXT)$(ELFDUMP_EXT)
PROGRAM_DEBUG_EXT         = $(DEBUG_EXT)$(PROGRAM_EXT)
PROGRAM_PROFILE_EXT       = $(PROFILE_EXT)$(PROGRAM_EXT)
PROGRAM_ELFDUMP_EXT       = $(PROGRAM_EXT)$(ELFDUMP_EXT)
PROGRAM_DEBUG_ELFDUMP_EXT = $(PROGRAM_DEBUG_EXT)$(ELFDUMP_EXT)
PROGRAM_PROFILE_ELFDUMP_EXT = $(PROGRAM_PROFILE_EXT)$(ELFDUMP_EXT)
PROGRAM_STRIP_EXT         = $(STRIP_EXT)$(PROGRAM_EXT)
PROGRAM_S3HEX_EXT         = $(S3HEX_EXT)
PROGRAM_INTELHEX_EXT      = $(INTELHEX_EXT)
PROGRAM_MQSIM_EXT         = $(MQSIM_EXT)
PROGRAM_PATVHD_EXT        = $(PATVHD_EXT)
PROGRAM_PATVE_EXT         = $(PATVE_EXT)
PROGRAM_SPANSION_EXT      = $(SPANSION_EXT)
PROGRAM_IMAGE_EXT         = $(IMAGE_EXT)
PROGRAM_MRS_EXT           = $(MRS_EXT)
PROGRAM_SYMBOL_EXT        = $(SYMBOL_EXT)
PROGRAM_ZIP_EXT           = $(PROGRAM_EXT)$(GZIP_EXT)
PROGRAM_FIRMWARE_EXT      = $(FIRMWARE_EXT)

  VARIABLES += OBJECT_DEBUG_EXT
  VARIABLES += OBJECT_PROFILE_EXT
  VARIABLES += LIBRARY_DEBUG_EXT
  VARIABLES += LIBRARY_PROFILE_EXT
  VARIABLES += PROGRAM_DEBUG_EXT
  VARIABLES += PROGRAM_ELFDUMP_EXT
  VARIABLES += PROGRAM_DEBUG_ELFDUMP_EXT
  VARIABLES += PROGRAM_PROFILE_ELFDUMP_EXT
  VARIABLES += PROGRAM_STRIP_EXT
  VARIABLES += PROGRAM_S3HEX_EXT
  VARIABLES += PROGRAM_INTELHEX_EXT
  VARIABLES += PROGRAM_MQSIM_EXT
  VARIABLES += PROGRAM_PATVHD_EXT
  VARIABLES += PROGRAM_PATVE_EXT
  VARIABLES += PROGRAM_SPANSION_EXT
  VARIABLES += PROGRAM_IMAGE_EXT
  VARIABLES += PROGRAM_MRS_EXT
  VARIABLES += PROGRAM_SYMBOL_EXT
  VARIABLES += PROGRAM_ZIP_EXT
  VARIABLES += PROGRAM_FIRMWARE_EXT

################################################################################
#
# common directory settings
#
################################################################################

#TOOLCHAIN_DIR     = $(TOOLCHAIN_PARENT_DIRECTORY)/toolchain
TOOLCHAIN_DIR     = $(TOOLCHAIN_PARENT_DIRECTORY)
TOOLCHAIN_TARBALL_GLIBC = $(SDK_TOP)/tools/toolchain/arm-linux/goke-720x-linux3.4.43-gcc$(GCC_VER)-glibc.tar.bz2
TOOLCHAIN_TARBALL_UCLIBC = $(SDK_TOP)/tools/toolchain/arm-linux/goke-720x-linux3.4.43-gcc$(GCC_VER)-uClibc.tar.bz2

ROOTFS_DIR                  := $(ROOTFS_PARENT_DIRECTORY)/rootfs_$(C_LIBRARY)
FILESYSTEM_DIR              := $(SDK_TOP)/linux/rootfs

ifeq ($(C_LIBRARY), glibc)
#PREBUILD_DIR                := $(FILESYSTEM_DIR)/arm-gk720x-linux-gnueabi
#ROOTFS_SCRIPT_DIR			 := $(FILESYSTEM_DIR)/arm-gk720x-linux-gnueabi/.script
PREBUILD_DIR                := /opt/linux/x86-arm/aarch64-mix210-linux/bin/aarch64-mix210-linux
else
PREBUILD_DIR                := $(FILESYSTEM_DIR)/arm-gk720x-linux-uclibcgnueabi
ROOTFS_SCRIPT_DIR           := $(FILESYSTEM_DIR)/arm-gk720x-linux-uclibcgnueabi/.script
endif

DECODER_SUBDIR = $(DECODER)
PROCESSOR_SUBDIR = M-$(word 1,$(subst -, ,$(TARGET)))
CVS_SUBDIR = .cvs
SVN_SUBDIR = .svn

ifdef SOURCE_DECODER_DEPENDEND
  BUILD_SOURCE_SUBDIR = src/$(DECODER_SUBDIR)
else
  BUILD_SOURCE_SUBDIR = src
endif

ifdef HEADER_DECODER_DEPENDEND
  BUILD_HEADER_SUBDIR ?= src/$(DECODER_SUBDIR)
else
  BUILD_HEADER_SUBDIR ?= src
endif

INSTALL_DIR ?= $(TOPDIR)/install
RELEASE_DIR ?= $(TOPDIR)/release_v$(RELEASE_MAJOR).$(RELEASE_MINOR).$(RELEASE_PATCH)

ifeq "$(SNAPSHOT)" "1"
  RELEASE_DIR := $(SNAPSHOT_DIR)
endif

ifeq "$(LIBRARY)" "undefined"
  HEADER_SUBDIR ?= .
else
  HEADER_SUBDIR ?= $(LIBRARY:lib%=%)
endif

#ifdef DECODER_INDEPENDEND
#  BUILD_OBJECT_SUBDIR     = build/$(TARGET_SUBDIR)
#  BUILD_LIBRARY_SUBDIR    = build/$(TARGET_SUBDIR)
#  BUILD_PROGRAM_SUBDIR    = build/$(TARGET_SUBDIR)
#  BUILD_DLL_SUBDIR        = build/$(TARGET_SUBDIR)
#  BUILD_INFO_SUBDIR       = build/$(TARGET_SUBDIR)
#  BUILD_FIRMWARE_SUBDIR   = build/firmware
#else
#  BUILD_OBJECT_SUBDIR     = build/$(DECODER_SUBDIR)/$(TARGET_SUBDIR)
#  BUILD_LIBRARY_SUBDIR    = build/$(DECODER_SUBDIR)/$(TARGET_SUBDIR)
#  BUILD_PROGRAM_SUBDIR    = build/$(DECODER_SUBDIR)/$(TARGET_SUBDIR)
#  BUILD_DLL_SUBDIR        = build/$(DECODER_SUBDIR)/$(TARGET_SUBDIR)
#  BUILD_INFO_SUBDIR       = build/$(DECODER_SUBDIR)/$(TARGET_SUBDIR)
#  BUILD_FIRMWARE_SUBDIR   = build/$(DECODER_SUBDIR)/firmware
#endif

BUILD_OBJECT_SUBDIR     = build/$(TARGET)-$(C_LIBRARY)-$(HOST)-$(DECODER)/obj
BUILD_LIBRARY_SUBDIR    = build/$(TARGET)-$(C_LIBRARY)-$(HOST)-$(DECODER)/lib
BUILD_PROGRAM_SUBDIR    = build/$(TARGET)-$(C_LIBRARY)-$(HOST)-$(DECODER)/bin
BUILD_DLL_SUBDIR        = build/$(TARGET)-$(C_LIBRARY)-$(HOST)-$(DECODER)/dll
BUILD_INFO_SUBDIR       = build/$(TARGET)-$(C_LIBRARY)-$(HOST)-$(DECODER)/info
BUILD_FIRMWARE_SUBDIR   = build/$(TARGET)-$(C_LIBRARY)-$(HOST)-$(DECODER)/firmware

BUILD_DOCUMENT_SUBDIR   = docs/$(DECODER_SUBDIR)/$(DOXYGEN_PROJECT)
BUILD_DOCUMENT_DIR      = $(TOPDIR)/$(BUILD_DOCUMENT_SUBDIR)

INSTALL_OBJECT_SUBDIR   = $(TARGET)-$(C_LIBRARY)-$(HOST)-$(DECODER)/lib
INSTALL_LIBRARY_SUBDIR  = $(TARGET)-$(C_LIBRARY)-$(HOST)-$(DECODER)/lib
INSTALL_INCLUDE_SUBDIR  = $(TARGET)-$(C_LIBRARY)-$(HOST)-$(DECODER)/include/$(HEADER_SUBDIR)
INSTALL_PROGRAM_SUBDIR  = $(TARGET)-$(C_LIBRARY)-$(HOST)-$(DECODER)/bin
INSTALL_DLL_SUBDIR      = $(TARGET)-$(C_LIBRARY)-$(HOST)-$(DECODER)/bin
INSTALL_DOCUMENT_SUBDIR = docs/$(DECODER_SUBDIR)/$(DOXYGEN_PROJECT)
INSTALL_FIRMWARE_SUBDIR = $(DECODER_SUBDIR)/bin/firmware

INSTALL_OBJECT_DIR      = $(INSTALL_DIR)/$(INSTALL_OBJECT_SUBDIR)
INSTALL_LIBRARY_DIR     = $(INSTALL_DIR)/$(INSTALL_LIBRARY_SUBDIR)
INSTALL_INCLUDE_DIR     = $(INSTALL_DIR)/$(INSTALL_INCLUDE_SUBDIR)
INSTALL_PROGRAM_DIR     = $(INSTALL_DIR)/$(INSTALL_PROGRAM_SUBDIR)
INSTALL_DLL_DIR         = $(INSTALL_DIR)/$(INSTALL_PROGRAM_SUBDIR)
INSTALL_DOCUMENT_DIR    = $(INSTALL_DIR)/$(INSTALL_DOCUMENT_SUBDIR)
INSTALL_FIRMWARE_DIR    = $(INSTALL_DIR)/$(INSTALL_FIRMWARE_SUBDIR)
INSTALL_HEADER_DIR      = $(INSTALL_DIR)/$(TARGET)-$(C_LIBRARY)-$(HOST)-$(DECODER)/include

INSTALL_BIN_DIR        ?= $(ROOTFS_DIR)/usr/local/bin
INSTALL_LOCAL_FILE_DIR ?= $(ROOTFS_DIR)/usr/local/bin

  VARIABLES += INSTALL_DIR
  VARIABLES += RELEASE_DIR
  VARIABLES += DECODER_SUBDIR
  VARIABLES += CVS_SUBDIR
  VARIABLES += SVN_SUBDIR
  VARIABLES += PROCESSOR_SUBDIR
  VARIABLES += BUILD_SOURCE_SUBDIR
  VARIABLES += BUILD_HEADER_SUBDIR
  VARIABLES += BUILD_OBJECT_SUBDIR
  VARIABLES += BUILD_LIBRARY_SUBDIR
  VARIABLES += BUILD_PROGRAM_SUBDIR
  VARIABLES += BUILD_DLL_SUBDIR
  VARIABLES += BUILD_DOCUMENT_SUBDIR
  VARIABLES += INSTALL_OBJECT_SUBDIR
  VARIABLES += INSTALL_LIBRARY_SUBDIR
  VARIABLES += INSTALL_INCLUDE_SUBDIR
  VARIABLES += INSTALL_PROGRAM_SUBDIR
  VARIABLES += INSTALL_FIRMWARE_SUBDIR
  VARIABLES += INSTALL_DLL_SUBDIR
  VARIABLES += INSTALL_OBJECT_DIR
  VARIABLES += INSTALL_LIBRARY_DIR
  VARIABLES += INSTALL_INCLUDE_DIR
  VARIABLES += INSTALL_PROGRAM_DIR
  VARIABLES += INSTALL_DLL_DIR
  VARIABLES += INSTALL_FIRMWARE_DIR
  VARIABLES += BUILD_DOCUMENT_DIR

RELEASE_FTPMIRROR_DIR = $(FTPMIRROR_DIR)

  VARIABLES += RELEASE_FTPMIRROR_DIR

################################################################################
#
# common build, install and release specific settings
#
################################################################################

SOURCES_c   = $(filter %.c,$(SOURCES))
SOURCES_C   = $(filter %.C,$(SOURCES))
SOURCES_cpp = $(filter %.cpp,$(SOURCES))
SOURCES_CPP = $(filter %.CPP,$(SOURCES))
SOURCES_s   = $(filter %.s,$(SOURCES))
SOURCES_S   = $(filter %.S,$(SOURCES))
SOURCES_asm = $(filter %.asm,$(SOURCES))
SOURCES_ASM = $(filter %.ASM,$(SOURCES))
SOURCES_BC  = $(SOURCES_c:%.c=%.c$(BEAUTIFY_EXT)) $(SOURCES_C:%.C=%.C$(BEAUTIFY_EXT))
OBJECTS     = $(subst \,/,$(SOURCES_s:%.s=%$(OBJECT_EXT)))
OBJECTS    += $(subst \,/,$(SOURCES_S:%.S=%$(OBJECT_EXT)))
OBJECTS    += $(subst \,/,$(SOURCES_asm:%.asm=%$(OBJECT_EXT)))
OBJECTS    += $(subst \,/,$(SOURCES_ASM:%.ASM=%$(OBJECT_EXT)))
OBJECTS    += $(subst \,/,$(SOURCES_c:%.c=%$(OBJECT_EXT)))
OBJECTS    += $(subst \,/,$(SOURCES_C:%.C=%$(OBJECT_EXT)))
OBJECTS    += $(subst \,/,$(SOURCES_cpp:%.cpp=%$(OBJECT_EXT)))
OBJECTS    += $(subst \,/,$(SOURCES_CPP:%.CPP=%$(OBJECT_EXT)))

  VARIABLES += SOURCES_c
  VARIABLES += SOURCES_C
  VARIABLES += SOURCES_cpp
  VARIABLES += SOURCES_CPP
  VARIABLES += SOURCES_s
  VARIABLES += SOURCES_S
  VARIABLES += SOURCES_asm
  VARIABLES += SOURCES_ASM
  VARIABLES += SOURCES_BC
  VARIABLES += OBJECTS

#STARTUP_S = $(filter %.s,$(notdir $(STARTUP)))
PROGRAM_STARTUP_s = $(filter %.s,$(notdir $(STARTUP)))

BUILD_OBJECTS                   = $(OBJECTS:%$(OBJECT_EXT)=$(BUILD_OBJECT_SUBDIR)/%$(OBJECT_EXT))
BUILD_DEBUG_OBJECTS             = $(OBJECTS:%$(OBJECT_EXT)=$(BUILD_OBJECT_SUBDIR)/%$(OBJECT_DEBUG_EXT))
BUILD_PROFILE_OBJECTS           = $(OBJECTS:%$(OBJECT_EXT)=$(BUILD_OBJECT_SUBDIR)/%$(OBJECT_PROFILE_EXT))
BUILD_INFO                      = $(BUILD_INFO_SUBDIR)/build-info$(TXT_EXT)
BUILD_LIBRARY                   = $(BUILD_LIBRARY_SUBDIR)/$(LIBRARY)$(LIBRARY_EXT)
BUILD_LIBRARY_OBJECTS           = $(BUILD_OBJECTS)
BUILD_ELFDUMP_LIBRARY           = $(BUILD_LIBRARY_SUBDIR)/$(LIBRARY)$(LIBRARY_ELFDUMP_EXT)
BUILD_DEBUG_LIBRARY             = $(BUILD_LIBRARY_SUBDIR)/$(LIBRARY)$(LIBRARY_DEBUG_EXT)
BUILD_DEBUG_ELFDUMP_LIBRARY     = $(BUILD_LIBRARY_SUBDIR)/$(LIBRARY)$(LIBRARY_DEBUG_ELFDUMP_EXT)
BUILD_DEBUG_LIBRARY_OBJECTS     = $(BUILD_DEBUG_OBJECTS)
BUILD_PROFILE_LIBRARY_OBJECTS   = $(BUILD_PROFILE_OBJECTS)
BUILD_DEBUG_DLL                 = $(BUILD_DLL_SUBDIR)/$(DLL)$(DLL_DEBUG_EXT)
BUILD_DEBUG_ELFDUMP_DLL         = $(BUILD_DLL_SUBDIR)/$(DLL)$(DLL_DEBUG_ELFDUMP_EXT)
BUILD_DEBUG_DLL_OBJECTS         = $(BUILD_DEBUG_OBJECTS)
BUILD_PROFILE_LIBRARY           = $(BUILD_LIBRARY_SUBDIR)/$(LIBRARY)$(LIBRARY_PROFILE_EXT)
BUILD_SHARED_LIBRARY            = $(BUILD_LIBRARY_SUBDIR)/$(LIBRARY)$(SHARED_EXT)
BUILD_PROGRAM                   = $(BUILD_PROGRAM_SUBDIR)/$(PROGRAM)$(PROGRAM_EXT)
BUILD_PROGRAM_OBJECTS           = $(BUILD_OBJECTS)
BUILD_DEBUG_PROGRAM             = $(BUILD_PROGRAM_SUBDIR)/$(PROGRAM)$(PROGRAM_DEBUG_EXT)
BUILD_DEBUG_PROGRAM_OBJECTS     = $(BUILD_DEBUG_OBJECTS)
BUILD_PROFILE_PROGRAM_OBJECTS   = $(BUILD_PROFILE_OBJECTS)
BUILD_PROFILE_PROGRAM           = $(BUILD_PROGRAM_SUBDIR)/$(PROGRAM)$(PROGRAM_PROFILE_EXT)
BUILD_ELFDUMP_PROGRAM           = $(BUILD_PROGRAM_SUBDIR)/$(PROGRAM)$(PROGRAM_ELFDUMP_EXT)
BUILD_GZIP_PROGRAM              = $(BUILD_PROGRAM_SUBDIR)/$(PROGRAM)$(PROGRAM_GZIP_EXT)
BUILD_DEBUG_ELFDUMP_PROGRAM     = $(BUILD_PROGRAM_SUBDIR)/$(PROGRAM)$(PROGRAM_DEBUG_ELFDUMP_EXT)
BUILD_PROFILE_ELFDUMP_PROGRAM   = $(BUILD_PROGRAM_SUBDIR)/$(PROGRAM)$(PROGRAM_PROFILE_ELFDUMP_EXT)
BUILD_STRIP_PROGRAM             = $(BUILD_PROGRAM_SUBDIR)/$(PROGRAM)$(PROGRAM_STRIP_EXT)
BUILD_IMAGE_PROGRAM             = $(BUILD_PROGRAM_SUBDIR)/$(PROGRAM)$(PROGRAM_IMAGE_EXT)
BUILD_MRS_PROGRAM               = $(BUILD_PROGRAM_SUBDIR)/$(PROGRAM)$(PROGRAM_MRS_EXT)
BUILD_S3HEX_PROGRAM             = $(BUILD_PROGRAM_SUBDIR)/$(PROGRAM)$(PROGRAM_S3HEX_EXT)
BUILD_INTELHEX_PROGRAM          = $(BUILD_PROGRAM_SUBDIR)/$(PROGRAM)$(PROGRAM_INTELHEX_EXT)
BUILD_MQSIM_PROGRAM             = $(BUILD_PROGRAM_SUBDIR)/$(PROGRAM)$(PROGRAM_MQSIM_EXT)
BUILD_PATVHD_PROGRAM            = $(BUILD_PROGRAM_SUBDIR)/$(PROGRAM)$(PROGRAM_PATVHD_EXT)
BUILD_PATVE_PROGRAM             = $(BUILD_PROGRAM_SUBDIR)/$(PROGRAM)$(PROGRAM_PATVE_EXT)
BUILD_SPANSION_PROGRAM          = $(BUILD_PROGRAM_SUBDIR)/$(PROGRAM)$(PROGRAM_SPANSION_EXT)
BUILD_SYMBOL_PROGRAM            = $(BUILD_PROGRAM_SUBDIR)/$(PROGRAM)$(PROGRAM_SYMBOL_EXT)
BUILD_FIRMWARE_PROGRAM          = $(BUILD_FIRMWARE_SUBDIR)/$(PROGRAM)$(PROGRAM_FIRMWARE_EXT)
BUILD_PROGRAM_LIBRARIES         = $(LIBRARIES:%=$(INSTALL_DIR)/$(INSTALL_OBJECT_SUBDIR)/lib%$(LIBRARY_EXT))
BUILD_DEBUG_PROGRAM_LIBRARIES   = $(BUILD_PROGRAM_LIBRARIES:%$(LIBRARY_EXT)=%$(LIBRARY_DEBUG_EXT))
BUILD_PROFILE_PROGRAM_LIBRARIES = $(BUILD_PROGRAM_LIBRARIES:%$(LIBRARY_EXT)=%$(LIBRARY_PROFILE_EXT))
BUILD_DLL_LIBRARIES             = $(LIBRARIES:%=$(INSTALL_DIR)/$(INSTALL_OBJECT_SUBDIR)/lib%$(LIBRARY_EXT))
BUILD_DEBUG_DLL_LIBRARIES       = $(BUILD_DLL_LIBRARIES:%$(LIBRARY_EXT)=%$(LIBRARY_DEBUG_EXT))
BUILD_PROGRAM_STARTUP_OBJECT    = $(PROGRAM_STARTUP_s:%.s=$(BUILD_OBJECT_SUBDIR)/%$(OBJECT_EXT))
BUILD_PROGRAM_SPECIAL_LIBRARIES         = $(subst \,/,$(SPECIAL_LIBRARIES))
BUILD_DEBUG_PROGRAM_SPECIAL_LIBRARIES   = $(subst \,/,$(SPECIAL_LIBRARIES_DEBUG))
BUILD_PROFILE_PROGRAM_SPECIAL_LIBRARIES = $(subst \,/,$(SPECIAL_LIBRARIES_PROFILE))
BUILD_DLL_SPECIAL_LIBRARIES             = $(subst \,/,$(SPECIAL_LIBRARIES))
BUILD_DEBUG_DLL_SPECIAL_LIBRARIES       = $(subst \,/,$(SPECIAL_LIBRARIES_DEBUG))
BUILD_DLL                       = $(BUILD_DLL_SUBDIR)/$(DLL)$(DLL_EXT)
BUILD_DLL_OBJECTS               = $(BUILD_OBJECTS)
BUILD_ELFDUMP_DLL               = $(BUILD_DLL_SUBDIR)/$(DLL)$(DLL_ELFDUMP_EXT)
BUILD_UBOOT                     = $(TOPDIR)/boot/uboot/u-boot.bin
#BUILD_UBOOT                     = $(TOPDIR)/env/bin/M-linux/u-boot.bin
BUILD_BASEBOOT                  = $(TOPDIR)/env/bin/M-linux/baseboot.out
BUILD_FIRMWARE_ARC              = $(TOPDIR)/drv/$(DECODER)/firmware/arc/dvb_arc_firmware.out
BUILD_KERNEL_ZIMAGE             = $(TOPDIR)/sys/linux/kernel/$(KERNEL_VER)/arch/arm/boot/zImage
BUILD_FLASH_IMAGE              ?= build/flimage.bin
BUILD_FLASH_IMAGE_DUMP         ?= build/flimage.txt
BUILD_BOOTER_SLOT_IMAGE        ?= build/bsimage.bin

EXTRACT_SFLASH_IMAGE            = $(BUILD_PROGRAM_SUBDIR)/sflashimg.bin
EXTRACT_PFLASH_IMAGE            = $(BUILD_PROGRAM_SUBDIR)/pflashimg.bin
EXTRACT_NFLASH_IMAGE            = $(BUILD_PROGRAM_SUBDIR)/nflashimg.bin
EXTRACT_SFLASH_ASCDATA          = $(BUILD_PROGRAM_SUBDIR)/sflashimg.asc
EXTRACT_PFLASH_ASCDATA          = $(BUILD_PROGRAM_SUBDIR)/pflashimg.asc
EXTRACT_NFLASH_ASCDATA          = $(BUILD_PROGRAM_SUBDIR)/nflashimg.asc
EXTRACT_MEMORY_IMAGE            = $(BUILD_PROGRAM_SUBDIR)/memoryimg.bin

  VARIABLES += BUILD_OBJECTS
  VARIABLES += BUILD_DEBUG_OBJECTS
  VARIABLES += BUILD_PROFILE_OBJECTS
  VARIABLES += BUILD_INFO
  VARIABLES += BUILD_LIBRARY
  VARIABLES += BUILD_LIBRARY_OBJECTS
  VARIABLES += BUILD_DEBUG_LIBRARY
  VARIABLES += BUILD_DEBUG_LIBRARY_OBJECTS
  VARIABLES += BUILD_PROFILE_LIBRARY
  VARIABLES += BUILD_PROFILE_LIBRARY_OBJECTS
  VARIABLES += BUILD_PROGRAM
  VARIABLES += BUILD_FIRMWARE_PROGRAM
  VARIABLES += BUILD_PROGRAM_LIBRARIES
  VARIABLES += BUILD_DEBUG_PROGRAM
  VARIABLES += BUILD_PROGRAM_STARTUP_OBJECT
  VARIABLES += PROGRAM_STARTUP_s
  VARIABLES += STARTUP_S
  VARIABLES += BUILD_PROFILE_PROGRAM
  VARIABLES += BUILD_ELFDUMP_PROGRAM
  VARIABLES += BUILD_ELFDUMP_DLL
  VARIABLES += BUILD_GZIP_PROGRAM
  VARIABLES += BUILD_DEBUG_ELFDUMP_PROGRAM
  VARIABLES += BUILD_PROFILE_ELFDUMP_PROGRAM
  VARIABLES += BUILD_STRIP_PROGRAM
  VARIABLES += BUILD_IMAGE_PROGRAM
  VARIABLES += BUILD_MRS_PROGRAM
  VARIABLES += BUILD_S3HEX_PROGRAM
  VARIABLES += BUILD_INTELHEX_PROGRAM
  VARIABLES += BUILD_MQSIM_PROGRAM
  VARIABLES += BUILD_PATVHD_PROGRAM
  VARIABLES += BUILD_PATVE_PROGRAM
  VARIABLES += BUILD_SPANSION_PROGRAM
  VARIABLES += BUILD_SYMBOL_PROGRAM
  VARIABLES += BUILD_DLL
  VARIABLES += BUILD_DLL_OBJECTS
  VARIABLES += BUILD_DEBUG_DLL
  VARIABLES += BUILD_FLASH_IMAGE
  VARIABLES += BUILD_FLASH_IMAGE_DUMP
  VARIABLES += EXTRACT_SFLASH_IMAGE
  VARIABLES += EXTRACT_PFLASH_IMAGE
  VARIABLES += EXTRACT_SFLASH_ASCDATA
  VARIABLES += EXTRACT_PFLASH_ASCDATA
  VARIABLES += EXTRACT_MEMORY_IMAGE

INSTALL_OBJECTS                   = $(BUILD_OBJECTS:$(BUILD_OBJECT_SUBDIR)/%=$(INSTALL_DIR)/$(INSTALL_OBJECT_SUBDIR)/%)
INSTALL_DEBUG_OBJECTS             = $(BUILD_OBJECTS:$(BUILD_OBJECT_SUBDIR)/%=$(INSTALL_DIR)/$(INSTALL_OBJECT_SUBDIR)/%)
INSTALL_PROFILE_OBJECTS           = $(BUILD_OBJECTS:$(BUILD_OBJECT_SUBDIR)/%=$(INSTALL_DIR)/$(INSTALL_OBJECT_SUBDIR)/%)
INSTALL_LIBRARY                   = $(INSTALL_DIR)/$(BUILD_LIBRARY:$(BUILD_LIBRARY_SUBDIR)/%=$(INSTALL_LIBRARY_SUBDIR)/%)
INSTALL_ELFDUMP_LIBRARY           = $(INSTALL_DIR)/$(BUILD_ELFDUMP_LIBRARY:$(BUILD_LIBRARY_SUBDIR)/%=$(INSTALL_LIBRARY_SUBDIR)/%)
INSTALL_DEBUG_LIBRARY             = $(INSTALL_DIR)/$(BUILD_DEBUG_LIBRARY:$(BUILD_LIBRARY_SUBDIR)/%=$(INSTALL_LIBRARY_SUBDIR)/%)
INSTALL_SHARED_LIBRARY            = $(INSTALL_DIR)/$(BUILD_SHARED_LIBRARY:$(BUILD_LIBRARY_SUBDIR)/%=$(INSTALL_LIBRARY_SUBDIR)/%)
INSTALL_DEBUG_ELFDUMP_LIBRARY     = $(INSTALL_DIR)/$(BUILD_DEBUG_ELFDUMP_LIBRARY:$(BUILD_LIBRARY_SUBDIR)/%=$(INSTALL_LIBRARY_SUBDIR)/%)
INSTALL_HEADERS                   = $(HEADERS:$(BUILD_HEADER_SUBDIR)/%=$(INSTALL_DIR)/$(INSTALL_INCLUDE_SUBDIR)/%)
INSTALL_PROFILE_LIBRARY           = $(INSTALL_DIR)/$(BUILD_PROFILE_LIBRARY:$(BUILD_LIBRARY_SUBDIR)/%=$(INSTALL_LIBRARY_SUBDIR)/%)
INSTALL_PROGRAM                   = $(INSTALL_DIR)/$(BUILD_PROGRAM:$(BUILD_PROGRAM_SUBDIR)/%=$(INSTALL_PROGRAM_SUBDIR)/%)
INSTALL_DEBUG_PROGRAM             = $(INSTALL_DIR)/$(BUILD_DEBUG_PROGRAM:$(BUILD_PROGRAM_SUBDIR)/%=$(INSTALL_PROGRAM_SUBDIR)/%)
INSTALL_PROFILE_PROGRAM           = $(INSTALL_DIR)/$(BUILD_PROFILE_PROGRAM:$(BUILD_PROGRAM_SUBDIR)/%=$(INSTALL_PROGRAM_SUBDIR)/%)
INSTALL_ELFDUMP_PROGRAM           = $(INSTALL_DIR)/$(BUILD_ELFDUMP_PROGRAM:$(BUILD_PROGRAM_SUBDIR)/%=$(INSTALL_PROGRAM_SUBDIR)/%)
INSTALL_GZIP_PROGRAM              = $(INSTALL_DIR)/$(BUILD_GZIP_PROGRAM:$(BUILD_PROGRAM_SUBDIR)/%=$(INSTALL_PROGRAM_SUBDIR)/%)
INSTALL_DEBUG_ELFDUMP_PROGRAM     = $(INSTALL_DIR)/$(BUILD_DEBUG_ELFDUMP_PROGRAM:$(BUILD_PROGRAM_SUBDIR)/%=$(INSTALL_PROGRAM_SUBDIR)/%)
INSTALL_STRIP_PROGRAM             = $(INSTALL_DIR)/$(BUILD_STRIP_PROGRAM:$(BUILD_PROGRAM_SUBDIR)/%=$(INSTALL_PROGRAM_SUBDIR)/%)
INSTALL_IMAGE_PROGRAM             = $(INSTALL_DIR)/$(BUILD_IMAGE_PROGRAM:$(BUILD_PROGRAM_SUBDIR)/%=$(INSTALL_PROGRAM_SUBDIR)/%)
INSTALL_MRS_PROGRAM               = $(INSTALL_DIR)/$(BUILD_MRS_PROGRAM:$(BUILD_PROGRAM_SUBDIR)/%=$(INSTALL_PROGRAM_SUBDIR)/%)
INSTALL_S3HEX_PROGRAM             = $(INSTALL_DIR)/$(BUILD_S3HEX_PROGRAM:$(BUILD_PROGRAM_SUBDIR)/%=$(INSTALL_PROGRAM_SUBDIR)/%)
INSTALL_INTELHEX_PROGRAM          = $(INSTALL_DIR)/$(BUILD_INTELHEX_PROGRAM:$(BUILD_PROGRAM_SUBDIR)/%=$(INSTALL_PROGRAM_SUBDIR)/%)
INSTALL_SYMBOL_PROGRAM            = $(INSTALL_DIR)/$(BUILD_SYMBOL_PROGRAM:$(BUILD_PROGRAM_SUBDIR)/%=$(INSTALL_PROGRAM_SUBDIR)/%)
INSTALL_DLL                       = $(INSTALL_DIR)/$(BUILD_DLL:$(BUILD_DLL_SUBDIR)/%=$(INSTALL_DLL_SUBDIR)/%)
INSTALL_DEBUG_DLL                 = $(INSTALL_DIR)/$(BUILD_DEBUG_DLL:$(BUILD_DLL_SUBDIR)/%=$(INSTALL_DLL_SUBDIR)/%)
INSTALL_FIRMWARE_PROGRAM          = $(INSTALL_DIR)/$(BUILD_FIRMWARE_PROGRAM:$(BUILD_FIRMWARE_SUBDIR)/%=$(INSTALL_FIRMWARE_SUBDIR)/%)
INSTALL_BIN                       = $(INSTALL_BIN_DIR)/$(PROGRAM)$(PROGRAM_EXT)
INSTALL_RELEASE_LIBRARY           = $(TOPDIR)/$(SUBDIR)/lib/$(C_LIBRARY)/$(LIBRARY)$(LIBRARY_EXT)
INSTALL_RELEASE_SHARED_LIBRARY    = $(TOPDIR)/$(SUBDIR)/lib/$(C_LIBRARY)/$(LIBRARY)$(SHARED_EXT)

  VARIABLES += INSTALL_OBJECTS
  VARIABLES += INSTALL_DEBUG_OBJECTS
  VARIABLES += INSTALL_PROFILE_OBJECTS
  VARIABLES += INSTALL_LIBRARY
  VARIABLES += INSTALL_DEBUG_LIBRARY
  VARIABLES += INSTALL_PROFILE_LIBRARY
  VARIABLES += INSTALL_HEADERS
  VARIABLES += INSTALL_PROGRAM
  VARIABLES += INSTALL_DEBUG_PROGRAM
  VARIABLES += INSTALL_PROFILE_PROGRAM
  VARIABLES += INSTALL_ELFDUMP_PROGRAM
  VARIABLES += INSTALL_DEBUG_ELFDUMP_PROGRAM
  VARIABLES += INSTALL_STRIP_PROGRAM
  VARIABLES += INSTALL_IMAGE_PROGRAM
  VARIABLES += INSTALL_MRS_PROGRAM
  VARIABLES += INSTALL_S3HEX_PROGRAM
  VARIABLES += INSTALL_INTELHEX_PROGRAM
  VARIABLES += INSTALL_SYMBOL_PROGRAM
  VARIABLES += INSTALL_DLL
  VARIABLES += INSTALL_DEBUG_DLL
  VARIABLES += INSTALL_FIRMWARE

ifndef DOXYGEN_CONFIG_HTML
# DOXYGEN_CONFIG_HTML    = $(TOPDIR)/env/doxygen/$(DECODER)_doxygen_html.cfg
  DOXYGEN_CONFIG_HTML    = $(TOPDIR)/env/doxygen/doxygen_html.cfg
endif
ifndef DOXYGEN_CONFIG_PDF
  #DOXYGEN_CONFIG_PDF    = $(TOPDIR)/env/doxygen/$(DECODER)_doxygen_pdf.cfg
  DOXYGEN_CONFIG_PDF    = $(TOPDIR)/env/doxygen/doxygen_pdf.cfg
endif
ifndef DOXYGEN_CONFIG_TEST_HTML
  DOXYGEN_CONFIG_TEST_HTML = $(TOPDIR)/env/doxygen/$(DECODER)_doxygen_TEST_html.cfg
endif
  DOXYGEN_DIRECTORY = $(BUILD_DOCUMENT_DIR)

  VARIABLES += DOXYGEN_CONFIG_HTML
  VARIABLES += DOXYGEN_CONFIG_PDF
  VARIABLES += DOXYGEN_PROJECT
  VARIABLES += DOXYGEN_DIRECTORY
  VARIABLES += DOXYGEN_SOURCES

export DECODER

DEPENDENCY_FILENAME = $(BUILD_OBJECT_SUBDIR)/Makefile.depend

  VARIABLES += DEPENDENCY_FILENAME

INSTALL_INCLUDE_DIRECTORIES = $(INSTALL_DIR)/$(DECODER_SUBDIR)/include
#INSTALL_INCLUDE_DIRECTORIES += $(wildcard $(INSTALL_DIR)/$(DECODER_SUBDIR)/include/*)

PROGRAM_LOAD_ADDRESS ?= 0x20000000
  VARIABLES += PROGRAM_LOAD_ADDRESS

ifeq "$(SNAPSHOT)" "1"
  RELEASE_TAG = Snapshot_$(SYSTEM_DATE)
  RELEASE_ZIP = $(RELEASE_DIR)$(ZIP_EXT)
  RELEASE_TXT = $(RELEASE_DIR)$(TXT_EXT)
  RELEASE_BZ2 = $(RELEASE_DIR)$(BZ2_EXT)
else
  RELEASE_TAG = Release_v$(RELEASE_MAJOR)_$(RELEASE_MINOR)_$(RELEASE_PATCH)
  RELEASE_ZIP = $(RELEASE_DIR)$(ZIP_EXT)
  RELEASE_TXT = $(RELEASE_DIR)$(TXT_EXT)
  RELEASE_BZ2 = $(RELEASE_DIR)$(BZ2_EXT)
endif

RELEASE_DDM          = $(RELEASE_DIR)/docs/$(DECODER)_DeviceManual.pdf
RELEASE_PATCH_TAG    = Release_v$(RELEASE_MAJOR)_$(RELEASE_MINOR)_p$(RELEASE_PATCH)
RELEASE_PATCH_ZIP    = $(RELEASE_DIR)_p$(RELEASE_PATCH)$(ZIP_EXT)
RELEASE_ADDON_NAME  ?= $(subst /,_,$(SUBDIR))
RELEASE_ADDON_ZIP    = $(notdir $(RELEASE_DIR))_$(RELEASE_ADDON_NAME)$(ZIP_EXT)
RELEASE_ADDON_SUBDIR = $(INSTALL_DIR)/$(notdir $(RELEASE_DIR))
RELEASE_ADDON_FILES  = $(RELEASE_ADDON_LOCAL_FILES:%=$(RELEASE_ADDON_SUBDIR)/$(SUBDIR)/%)
RELEASE_ADDON_FILES += $(RELEASE_ADDON_TOPDIR_FILES:%=$(RELEASE_ADDON_SUBDIR)/%)
RELEASE_INFO_FILE    = $(TOPDIR)/ReleaseInfo.txt

  VARIABLES += RELEASE_TAG
  VARIABLES += RELEASE_ZIP
  VARIABLES += RELEASE_TXT
  VARIABLES += RELEASE_DDM
  VARIABLES += RELEASE_PATCH_TAG
  VARIABLES += RELEASE_PATCH_ZIP
  VARIABLES += RELEASE_ADDON_ZIP
  VARIABLES += RELEASE_INFO_FILE

ifeq ("$(HOST)","win32")
  ACTDIR := $(shell cmd /C echo %CD%)
endif
ifeq ("$(HOST)","cygwin32")
  ACTDIR := ${PWD}
endif
ifeq ("$(HOST)","linux")
  ACTDIR := ${PWD}
endif

#ACTDIR = $(shell cygpath -m "$$PWD")

  VARIABLES += ACTDIR

PSMKPROJECT          = $(TOPDIR)/env/polyspace/mkproject.pl
PSMKPROJECT_FLAGS   += --verbose
PSMKPROJECT_FLAGS   += --hdtv-root-dir=P:
PSMKPROJECT_FLAGS   += --hdtv-project-dir=$(shell cygpath -m "$$PWD")
PSMKPROJECT_FLAGS   += --hdtv-install-dir=$(shell cygpath -m $(INSTALL_DIR)/$(DECODER_SUBDIR))
PSMKPROJECT_FLAGS   += --hdtv-project-name=$(PS_PROJECT_NAME)
PSMKPROJECT_FLAGS   += --hdtv-driver-name=$(PS_DRIVER_NAME)
PSMKPROJECT_FLAGS   += --ps-results-subdir=results
PSMKPROJECT_FLAGS   += --ps-source-files="$(PS_SOURCE_LIST)"
PSMKPROJECT_FLAGS   += --ps-include-dirs="$(PS_INCLUDE_LIST)"
PSMKPROJECT_QUICK    = --ps-quickmode=1 --ps-presision=0
PSMKPROJECT_O0       = --ps-quickmode=0 --ps-presision=0
PSMKPROJECT_O1       = --ps-quickmode=0 --ps-presision=1
PSMKPROJECT_O2       = --ps-quickmode=0 --ps-presision=2
PSMKPROJECT_O3       = --ps-quickmode=0 --ps-presision=3
#PSMKPROJECT_DESKTOP += --input-filename=$(TOPDIR)/env/polyspace/project.dsk
PSMKPROJECT_SERVER  += --input-filename=$(TOPDIR)/env/polyspace/project.cfg
PSMKPROJECT_FLAGS   += --ps-optuser-flags=$(PS_USER_FLAGS)

  VARIABLES += PSMKPROJECT
  VARIABLES += PSMKPROJECT_FLAGS
  VARIABLES += PSMKPROJECT_QUICK
  VARIABLES += PSMKPROJECT_O0
  VARIABLES += PSMKPROJECT_O1
  VARIABLES += PSMKPROJECT_O2
  VARIABLES += PSMKPROJECT_O3
  VARIABLES += PSMKPROJECT_DESKTOP
  VARIABLES += PSMKPROJECT_SERVER

SYSTEM_DATE = $(shell date +%d.%m.%Y)
SYSTEM_TIME = $(shell date +%T)

  VARIABLES += SYSTEM_DATE
  VARIABLES += SYSTEM_TIME

MEMORY_BYTES_SYSTEM ?= 0x04000000
MEMORY_BYTES_VIDEO  ?= 0x04000000

  VARIABLES += MEMORY_BYTES_SYSTEM
  VARIABLES += MEMORY_BYTES_VIDEO

ifeq ($(BOARD),BOARD_FUJITSU_FPGA)
  RVS_EXT = _fpga.rvs
else
  RVS_EXT = .rvs
endif

ifeq ("$(MEMORY_BYTES_SYSTEM)","0x02000000")
  RVS_SYSTEM_EXT = _system256mb
else
  ifeq ("$(MEMORY_BYTES_SYSTEM)","0x04000000")
    RVS_SYSTEM_EXT = _system512mb
  else
    ifeq ("$(MEMORY_BYTES_SYSTEM)","0x08000000")
      RVS_SYSTEM_EXT = _system1gb
    else
      ifeq ("$(MEMORY_BYTES_SYSTEM)","0x10000000")
        RVS_SYSTEM_EXT = _system2gb
      else
        ifeq ("$(MEMORY_BYTES_SYSTEM)","0x00000000")
          RVS_SYSTEM_EXT = _system0mb
        else
          RVS_SYSTEM_EXT = _systemXXXmb
        endif
      endif
    endif
  endif
endif

ifeq ("$(MEMORY_BYTES_VIDEO)","0x02000000")
  RVS_VIDEO_EXT = _video256mb
else
  ifeq ("$(MEMORY_BYTES_VIDEO)","0x04000000")
    RVS_VIDEO_EXT = _video512mb
  else
    ifeq ("$(MEMORY_BYTES_VIDEO)","0x08000000")
      RVS_VIDEO_EXT = _video1gb
    else
      ifeq ("$(MEMORY_BYTES_VIDEO)","0x10000000")
        RVS_VIDEO_EXT = _video2gb
      else
        RVS_SYSTEM_EXT = _videoXXXmb
      endif
    endif
  endif
endif

MEMORY_START_BEP ?= 0x40000000
MEMORY_BYTES_BEP ?= 0x00040000

  VARIABLES += MEMORY_START_BEP
  VARIABLES += MEMORY_BYTES_BEP

#RVSFILE ?= $(TOPDIR)/env/execute/ddr_init$(RVS_SYSTEM_EXT)$(RVS_VIDEO_EXT)$(RVS_EXT)
RVSFILE ?= $(TOPDIR)/env/execute/$(DECODER)/ddr_init_$(MEMORY_DDR_FREQ)_$(MEMORY_DDR_TYPE)$(RVS_SYSTEM_EXT)$(RVS_VIDEO_EXT)$(RVS_EXT)
MACFILE ?= $(BUILD_OBJECT_SUBDIR)/mac_address$(RVS_EXT)

  VARIABLES += RVS_SYSTEM_EXT
  VARIABLES += RVS_VIDEO_EXT
  VARIABLES += RVS_EXT
  VARIABLES += RVSFILE
  VARIABLES += MACFILE

################################################################################
# There are several command line flags to control the reset lines and
# the delay between startup actions handled by the debug interface.
#
# flashreset:
# tells the executer to keep the flash in reset
# while the CPU reset is executed. Take care that the reset
# of the flash is really connected to the flash-reset line of
# the debug interface (and not to the system reset).
# Use this feature to avoid booting from
# flash while downloading a program via debugger.
#
# sys-reset-delay:
# is the time between system (CPU-) reset
# and start of debug communication test. This value should be increased
# if you have a reset controller that introduces a delay between
# input (debug interface) and output (MB86H6x).
# When "flashreset" is enabled, then the test of the debug communication
# and release of the flash reset happens at the same time.
#
# reset-wait:
# is the time between communication test and
# download start. Usually this is not needed. Default value is 0,
#
# exec-wait:
# is the time after download before the CPU ist started
# It can be set to 0
################################################################################

#EXECUTE_PROG     ?= -elf=
#EXECUTEFLAGS     += -verbose
#EXECUTEFLAGS     += -dll=$(DEBUGPORT_DLL)
#EXECUTEFLAGS     += $(DEBUGPORT_FLAGS)
#EXECUTEFLAGS     += -flashtype=$(FLASHTYPE)
#EXECUTEFLAGS     += -flashreset
#EXECUTEFLAGS     += -sys-reset-delay=800
#EXECUTEFLAGS     += -exec-wait=0
ifneq ($(DEBUGPORT_PASSWORD),0x0000000000000000)
#EXECUTEFLAGS     += -password=$(DEBUGPORT_PASSWORD)
endif

#EXECUTE_RVS_FILE += -reg=$(RVSFILE)

  VARIABLES += EXECUTE
  VARIABLES += EXECUTEFLAGS
  VARIABLES += EXECUTEFLAGS_USER
  VARIABLES += EXECUTE_PROG
  VARIABLES += EXECUTE_RVS_FILE

FLIMGENFLAGS       += -verbose
FLIMGENFLAGS       += -decoder=$(DECODER)
FLIMGENFLAGS       += -flashtype=$(FLASHTYPE)
FLIMGENFLAGS       += -out=$(FLIMGEN_IMAGE_FILE)
FLIMGEN_IMAGE_FILE ?= $(BUILD_FLASH_IMAGE)
FLIMGEN_RVS_FILE   ?= $(EXECUTE_RVS_FILE)
FLIMGEN_ELF_FILES  ?= -elf=$(BUILD_PROGRAM)
FLIMGEN_BIN_FILES  ?=

  VARIABLES += FLIMGEN
  VARIABLES += FLIMGENFLAGS
  VARIABLES += FLIMGENFLAGS_USER
  VARIABLES += FLIMGEN_IMAGE_FILE
  VARIABLES += FLIMGEN_RVS_FILES
  VARIABLES += FLIMGEN_ELF_FILES
  VARIABLES += FLIMGEN_BIN_FILES

FLIMDUMPFLAGS       += -verbose
FLIMDUMPFLAGS       += -img=$(BUILD_FLASH_IMAGE)
FLIMDUMPFLAGS       += -out=$(FLIMDUMP_IMAGE_FILE)
FLIMDUMP_IMAGE_FILE ?= $(BUILD_FLASH_IMAGE_DUMP)

  VARIABLES += FLIMDUMP
  VARIABLES += FLIMDUMPFLAGS
  VARIABLES += FLIMDUMPFLAGS_USER
  VARIABLES += FLIMDUMP_IMAGE_FILE

BIMGENFLAGS           += -verbose
BIMGENFLAGS           += -compress=$(BIMGEN_IMAGE_COMPRESS)
BIMGENFLAGS           += -encrypt=$(BIMGEN_IMAGE_ENCRYPT)
BIMGENFLAGS           += -name=$(BIMGEN_IMAGE_NAME)
BIMGENFLAGS           += -out=$(BIMGEN_IMAGE_FILE)
BIMGENFLAGS           += -version=$(BIMGEN_IMAGE_VERSION)
BIMGENFLAGS           += $(BIMGEN_IMAGE_FILES)
ifdef TDES_KEY_FILE
BIMGENFLAGS           += -tdeskey=$(TDES_KEY_FILE)
endif
BIMGEN_IMAGE_NAME     ?= noname
BIMGEN_IMAGE_FILE     ?= $(BUILD_BOOTER_SLOT_IMAGE)
BIMGEN_IMAGE_FILES    ?=
BIMGEN_IMAGE_VERSION  ?= 1
BIMGEN_IMAGE_COMPRESS ?= on
BIMGEN_IMAGE_ENCRYPT  ?= off

  VARIABLES += BIMGENFLAGS
  VARIABLES += BIMGEN_IMAGE_NAME
  VARIABLES += BIMGEN_IMAGE_FILE
  VARIABLES += BIMGEN_IMAGE_FILES
  VARIABLES += BIMGEN_IMAGE_VERSION
  VARIABLES += BIMGEN_IMAGE_COMPRESS
  VARIABLES += BIMGEN_IMAGE_ENCRYPT

ifeq ($(TARGET),arc700-metaware)
  FLASHER_EXT += .out
endif
ifeq  ($(TARGET),arm11-realview)
  FLASHER_EXT += .axf
endif
ifeq  ($(TARGET),arm11-gnuarm)
  FLASHER_EXT += .elf
endif

FLASHER_PROGRAM = $(TOPDIR)/env/bin/M-$(TARGET)/flasher$(FLASHER_EXT)

FLASHERFLAGS   += -verbose
FLASHERFLAGS   += -flash
FLASHERFLAGS   += -flashtype=$(FLASHTYPE)
FLASHERFLAGS   += -flashbase=$(FLASHBASE)
FLASHERFLAGS   += -flashoffset=0x0
FLASHERFLAGS   += -flashinfo=$(FLASHER_INFO_BASE)
FLASHERFLAGS   += -dll=$(DEBUGPORT_DLL)
FLASHERFLAGS   += $(DEBUGPORT_FLAGS)
FLASHERFLAGS   += -bin=$(BUILD_FLASH_IMAGE)@RAW,$(FLASHER_IMAGE_BASE),,LOAD
FLASHERFLAGS   += -elf=$(FLASHER_PROGRAM)
FLASHERFLAGS   += $(EXECUTE_RVS_FILE)
FLASHERFLAGS   += -wait=polling
FLASHERFLAGS   += -sys-reset-delay=800
#FLASHERFLAGS  += -rblmsg
ifneq ($(DEBUGPORT_PASSWORD),0x0000000000000000)
FLASHERFLAGS   += -password=$(DEBUGPORT_PASSWORD)
endif

  VARIABLES += FLASHER
  VARIABLES += FLASHERFLAGS
  VARIABLES += FLASHERFLAGS_USER
  VARIABLES += FLASHER_PROGRAM
  VARIABLES += FLASHER_INFO_BASE
  VARIABLES += FLASHER_IMAGE_BASE

MEMDUMP_ADDRESS ?= $(PROGRAM_LOAD_ADDRESS)
MEMDUMP_KBYTES  ?= 1024

  VARIABLES += MEMDUMP_ADDRESS
  VARIABLES += MEMDUMP_KBYTES

#ROOT_SCRIPTS += $(TOPDIR)/ShellCmd.bat
#ROOT_SCRIPTS += $(TOPDIR)/ShellBash.bat
#ROOT_SCRIPTS += $(TOPDIR)/CreateIcons.bat
#ROOT_SCRIPTS += $(TOPDIR)/setenv.bat

################################################################################
#
# Target board memory specifications (mandatory)
#
# The following macros describe the memeory system to be used for ARM and ARC
# applications. All of these macros are passed by to the C compiler using the
# -D<MACRO>=<value> syntax, for macros prefixed with either ARM_ or ARC_ the
# plain names will be passed as C compiler define (ie. PROGRAM_LOAD_ADDRESS).
#
# PROGRAM_MEMORY_INDEX        : either 1 or 2, telling the make environment
#                                 whether to use DDR_MEMORY_1_START or
#                                 DDR_MEMORY_2_START as application memory
#
# DDR_MEMORY_START_1          : start address of first DDR memory device
# DDR_MEMORY_BYTES_1          : size in bytes of first DDR memory device
# DDR_MEMORY_START_2          : start address of second DDR memory device
# DDR_MEMORY_BYTES_2          : size in bytes of second DDR memory device
# ARM_PROGRAM_LOAD_ADDRESS    : default load address for ARM programs
# ARM_PROGRAM_STACK_BYTES     : default stack size in bytes for ARM programs
# ARM_PROGRAM_HEAP_BYTES      : default stack size in bytes for ARM programs
# ARC_PROGRAM_LOAD_ADDRESS    : default load address for ARC programs
# ARC_PROGRAM_STACK_BYTES     : default stack size in bytes for ARC programs
# ARC_PROGRAM_HEAP_BYTES      : default stack size in bytes for ARC programs
#
################################################################################

ifeq ($(MEMORY_BYTES_SYSTEM),0x00000000)
  PROGRAM_MEMORY_INDEX       := 2
else
  PROGRAM_MEMORY_INDEX       := 1
endif

  MEMORY_OFFSET_VIDEO        ?= 0x00000000
  PROGRAM_MEMORY_INDEX       ?= 1
  DDR_MEMORY_START_1         := 0x20000000
  DDR_MEMORY_BYTES_1         ?= $(MEMORY_BYTES_SYSTEM)
  DDR_MEMORY_START_2         := 0x40000000
  DDR_MEMORY_BYTES_2         ?= $(MEMORY_BYTES_VIDEO)
  ARM_PROGRAM_LOAD_ADDRESS_1 := 0x21700000
  ARM_PROGRAM_LOAD_ADDRESS_2 := 0x41700000
  ARM_PROGRAM_STACK_BYTES    := 0x00010000
  ARM_PROGRAM_HEAP_BYTES     := 0x00200000
  ARM_PROGRAM_LOAD_ADDRESS   := $(ARM_PROGRAM_LOAD_ADDRESS_$(PROGRAM_MEMORY_INDEX))
  ARM_PROGRAM_MEMORY_START   := $(DDR_MEMORY_START_$(PROGRAM_MEMORY_INDEX))
  ARM_PROGRAM_MEMORY_BYTES   := $(DDR_MEMORY_BYTES_$(PROGRAM_MEMORY_INDEX))
  ARC_PROGRAM_LOAD_ADDRESS_1 := 0x20000000
  ARC_PROGRAM_LOAD_ADDRESS_2 := 0x40040000
  ARC_PROGRAM_STACK_BYTES    := 0x00010000
  ARC_PROGRAM_HEAP_BYTES     := 0x00200000
  ARC_PROGRAM_LOAD_ADDRESS   := $(ARC_PROGRAM_LOAD_ADDRESS_$(PROGRAM_MEMORY_INDEX))
  ARC_PROGRAM_MEMORY_START   := $(DDR_MEMORY_START_$(PROGRAM_MEMORY_INDEX))
  ARC_PROGRAM_MEMORY_BYTES   := $(DDR_MEMORY_BYTES_$(PROGRAM_MEMORY_INDEX))

ifeq ($(MEMORY_BYTES_SYSTEM),0x00000000)
  ARM_PROGRAM_MEMORY_BYTES   := $(MEMORY_OFFSET_VIDEO)
else
  ARM_PROGRAM_MEMORY_BYTES   := $(DDR_MEMORY_BYTES_1)
endif

  VARIABLES += MEMORY_OFFSET_VIDEO
  VARIABLES += PROGRAM_MEMORY_INDEX
  VARIABLES += DDR_MEMORY_START_1
  VARIABLES += DDR_MEMORY_BYTES_1
  VARIABLES += DDR_MEMORY_START_2
  VARIABLES += DDR_MEMORY_BYTES_2
  VARIABLES += ARM_PROGRAM_LOAD_ADDRESS_1
  VARIABLES += ARM_PROGRAM_LOAD_ADDRESS_2
  VARIABLES += ARM_PROGRAM_STACK_BYTES
  VARIABLES += ARM_PROGRAM_HEAP_BYTES
  VARIABLES += ARM_PROGRAM_LOAD_ADDRESS
  VARIABLES += ARM_PROGRAM_MEMORY_START
  VARIABLES += ARM_PROGRAM_MEMORY_BYTES
  VARIABLES += ARC_PROGRAM_LOAD_ADDRESS_1
  VARIABLES += ARC_PROGRAM_LOAD_ADDRESS_2
  VARIABLES += ARC_PROGRAM_STACK_BYTES
  VARIABLES += ARC_PROGRAM_HEAP_BYTES
  VARIABLES += ARC_PROGRAM_LOAD_ADDRESS
  VARIABLES += ARC_PROGRAM_MEMORY_START
  VARIABLES += ARC_PROGRAM_MEMORY_BYTES

ifeq ("$(MEMORY_BYTES_SYSTEM)","0x00000000")
  ifeq ("$(USE_IPC)","1")
    MEMORY_BYTES_IPC = 0x00400000
    MEMORY_START_IPC = $(DDR_MEMORY_START_2)+$(MEMORY_OFFSET_VIDEO)-$(MEMORY_BYTES_IPC)
    MEMORY_HEAP2_END = $(MEMORY_START_IPC)
  else
    MEMORY_BYTES_IPC = 0x00000000
    MEMORY_START_IPC = 0x00000000
    MEMORY_HEAP2_END = $(DDR_MEMORY_START_2)+$(MEMORY_OFFSET_VIDEO)
  endif
else
  ifeq ("$(MEMORY_BYTES_VIDEO)","0x04000000")
    ifeq ("$(USE_IPC)","1")
      MEMORY_BYTES_IPC = 0x00400000
      MEMORY_START_IPC = $(DDR_MEMORY_START_1)+$(MEMORY_BYTES_SYSTEM)-$(MEMORY_BYTES_IPC)
      MEMORY_HEAP2_END = $(DDR_MEMORY_START_1)+$(MEMORY_BYTES_SYSTEM)-$(MEMORY_BYTES_IPC)
    else
      MEMORY_BYTES_IPC = 0x00000000
      MEMORY_START_IPC = 0x00000000
      MEMORY_HEAP2_END = $(DDR_MEMORY_START_1)+$(MEMORY_BYTES_SYSTEM)
    endif
  else
    ifeq ("$(USE_IPC)","1")
      MEMORY_BYTES_IPC = 0x00400000
      MEMORY_START_IPC = 0x00000000
      MEMORY_HEAP2_END = $(DDR_MEMORY_START_1)+$(MEMORY_BYTES_SYSTEM)
    else
      MEMORY_BYTES_IPC = 0x00000000
      MEMORY_START_IPC = 0x00000000
      MEMORY_HEAP2_END = $(DDR_MEMORY_START_1)+$(MEMORY_BYTES_SYSTEM)
    endif
  endif
endif

USE_IPC          ?= 0
MEMORY_START_IPC ?= 0x00000000
MEMORY_BYTES_IPC ?= 0x00000000
MEMORY_HEAP2_END ?= $(DDR_MEMORY_START_1)+$(MEMORY_BYTES_SYSTEM)

ifneq ($(findstring 0x4,"$(PROGRAM_LOAD_ADDRESS)"),)
  ifneq ($(findstring 0x2,"$(MEMORY_HEAP2_END)"),)
    MEMORY_HEAP2_END = $(DDR_MEMORY_START_2)+$(MEMORY_BYTES_VIDEO)
  endif
endif

  VARIABLES += MEMORY_START_IPC
  VARIABLES += MEMORY_BYTES_IPC
  VARIABLES += MEMORY_HEAP2_END

################################################################################
#
# Short-cuts for SDK default short-cuts (optional)
#
# The following SDK default definitions allow you to pass short-cut names
# instead of target names to "make"
#
# "make ARM=1" expands to "make TARGET=$(DEFAULT_ARM11_SDK)"
# "make ARC=1" expands to "make TARGET=$(DEFAULT_ARC700_SDK)"
# "make WIN=1" expands to "make TARGET=$(DEFAULT_WIN32_SDK)"
#
################################################################################

  DEFAULT_ARM11_SDK  ?= arm11-realview
  DEFAULT_ARC700_SDK ?= arc700-metaware
  DEFAULT_WIN32_SDK  ?= win32-mingw

################################################################################
#
# Debug and JTAG port dll settings (optional)
#
# This macros defines the debug port dll and required command line parameters
# to be passed to the dll.
#
# NOTE: if you are using the old style debug port adapter (debug port only)
#       the USB channel should be set to USB1 (as long as you don't have other
#       FTDI based serial converter devices..
#
# NOTE: if you are using the new style debug port adapter (debug and JTAG port)
#       the USB channel for the debug port should be set to USB2 and the USB
#       channel for the JTAG port should be set to USB1.
#
# WARNING: Wrong USB channel settings sometimes result in a blue-screen!
#
################################################################################

  GDBSERVER_HOST = 127.0.0.1
  GDBSERVER_PORT = 12345
  DBGBOARD_TEST  = RAMBASE=0x02002000
  DBGBOARD_HOST  = $(GDBSERVER_HOST):$(GDBSERVER_PORT)

ifeq ($(BOARD),BOARD_FUJITSU_FPGA)

  DBGBOARD_FREQ = SYSFREQ=81000000
  DBGBOARD_BAUD = STARTBAUD=38400:BAUDRATE=921600

  ifeq ($(DBGBOARD),DEBUGPORT_ONLY)
    DEBUGPORT_FLAGS = -port=USB0:$(DBGBOARD):$(DBGBOARD_FREQ):$(DBGBOARD_BAUD):$(DBGBOARD_TEST)
    JTAGPORT_FLAGS  = __unused__
  endif

  ifeq ($(DBGBOARD),DEBUGPORT_JTAGPORT)
    DEBUGPORT_FLAGS = -port=USB0:USB-SERIAL-FPGA:$(DBGBOARD_FREQ):$(DBGBOARD_BAUD):$(DBGBOARD_TEST)
    JTAGPORT_FLAGS  = -port=USB0:$(DBGBOARD) -IP=$(DBGBOARD_HOST) -verbose
  endif

else

  DBGBOARD_FREQ = SYSFREQ=396000000
# DBGBOARD_BAUD = STARTBAUD=38400:BAUDRATE=1152000
  DBGBOARD_BAUD = STARTBAUD=38400:BAUDRATE=3000000

  ifeq ($(DBGBOARD),DEBUGPORT_ONLY)
    DEBUGPORT_FLAGS = -port=USB0:$(DBGBOARD):$(DBGBOARD_FREQ):$(DBGBOARD_BAUD):$(DBGBOARD_TEST)
    JTAGPORT_FLAGS  = __unused__
  endif

  ifeq ($(DBGBOARD),DEBUGPORT_JTAGPORT)
    DEBUGPORT_FLAGS = -port=USB0:$(DBGBOARD):$(DBGBOARD_FREQ):$(DBGBOARD_BAUD):$(DBGBOARD_TEST)
    JTAGPORT_FLAGS  = -port=USB0:$(DBGBOARD) -IP=$(DBGBOARD_HOST) -verbose
  endif

endif

  VARIABLES += GDBSERVER_HOST
  VARIABLES += GDBSERVER_PORT
  VARIABLES += DBGBOARD_TEST
  VARIABLES += DBGBOARD_HOST
  VARIABLES += DBGBOARD_FREQ
  VARIABLES += DBGBOARD_BAUD
  VARIABLES += DEBUGPORT_DLL
  VARIABLES += DEBUGPORT_FLAGS
  VARIABLES += JTAGPORT_DLL
  VARIABLES += JTAGPORT_FLAGS

  MAC_ADDRESS_BYTES  = $(subst :, ,$(MAC_ADDRESS))
  MAC_REGISTER_47_32 = 0xE2000040
  MAC_REGISTER_31_00 = 0xE2000044
  MAC_ADDRESS_47_32  = 0x8000$(word 6,$(MAC_ADDRESS_BYTES))$(word 5,$(MAC_ADDRESS_BYTES))
  MAC_ADDRESS_31_00  = 0x$(word 4,$(MAC_ADDRESS_BYTES))$(word 3,$(MAC_ADDRESS_BYTES))$(word 2,$(MAC_ADDRESS_BYTES))$(word 1,$(MAC_ADDRESS_BYTES))
  MAC_COMMENT_47_32  = MAC address bits 47..32
  MAC_COMMENT_31_00  = MAC address bits 31..00

  VARIABLES += MAC_ADDRESS
  VARIABLES += MAC_ADDRESS_BYTES
  VARIABLES += MAC_REGISTER_47_32
  VARIABLES += MAC_REGISTER_31_00
  VARIABLES += MAC_ADDRESS_47_32
  VARIABLES += MAC_ADDRESS_31_00
  VARIABLES += MAC_COMMENT_47_32
  VARIABLES += MAC_COMMENT_31_00
